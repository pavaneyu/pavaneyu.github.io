<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pavane</title>
  
  
  <link href="https://pavaneyu.github.io/atom.xml" rel="self"/>
  
  <link href="https://pavaneyu.github.io/"/>
  <updated>2022-07-04T13:22:49.798Z</updated>
  <id>https://pavaneyu.github.io/</id>
  
  <author>
    <name>OuyangYu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://pavaneyu.github.io/2022/07/02/%E9%9D%A2%E8%AF%95/%E5%B9%B3%E6%97%B6%E7%9A%84%E7%A7%AF%E7%B4%AF/"/>
    <id>https://pavaneyu.github.io/2022/07/02/%E9%9D%A2%E8%AF%95/%E5%B9%B3%E6%97%B6%E7%9A%84%E7%A7%AF%E7%B4%AF/</id>
    <published>2022-07-02T01:25:24.968Z</published>
    <updated>2022-07-04T13:22:49.798Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/.io//image-20220702092537477.png" alt="image-20220702092537477"></p><p><img src="/.io//image-20220702092707501.png" alt="image-20220702092707501"></p><h1 id="怎么判断线程池-任务是否执行完毕"><a href="#怎么判断线程池-任务是否执行完毕" class="headerlink" title="怎么判断线程池 任务是否执行完毕"></a>怎么判断线程池 任务是否执行完毕</h1><ul><li>isTerminaed</li><li>countdownLatch  一个线程执行完就countDown()  但是需要预先知道线程数量</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/.io//image-20220702092537477.png&quot; alt=&quot;image-20220702092537477&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/.io//image-20220702092707501.png&quot; alt=&quot;imag</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://pavaneyu.github.io/2022/06/30/%E9%9D%A2%E8%AF%95/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    <id>https://pavaneyu.github.io/2022/06/30/%E9%9D%A2%E8%AF%95/%E7%AE%97%E6%B3%95%E9%A2%98/</id>
    <published>2022-06-30T07:01:16.543Z</published>
    <updated>2022-06-30T12:01:17.352Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="topn问题-如何在一亿个数字中-找前一百万个"><a href="#topn问题-如何在一亿个数字中-找前一百万个" class="headerlink" title="topn问题 如何在一亿个数字中 找前一百万个"></a>topn问题 如何在一亿个数字中 找前一百万个</h1><ul><li>暴力快排</li><li>分治法 分成多分  放到线程里 排序  提高Cpu 利用率</li><li>最小堆   <ul><li>读前一万个 排序  最小的放堆顶   </li><li>然后后面的数据 遍历一遍  只与堆顶比较  ,小就continue  大就替换堆顶</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;topn问题-如何在一亿个数字中-找前一百万个&quot;&gt;&lt;a href=&quot;#topn问题-如何在一亿个数字中-找前一百万个&quot; class=&quot;headerlink&quot; title=&quot;topn问题 如何在一亿个数字中 找前一百万个&quot;&gt;&lt;/a&gt;topn</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://pavaneyu.github.io/2022/06/25/test/%E8%AE%B0%E5%BD%95/"/>
    <id>https://pavaneyu.github.io/2022/06/25/test/%E8%AE%B0%E5%BD%95/</id>
    <published>2022-06-25T12:49:13.133Z</published>
    <updated>2022-06-26T14:24:55.005Z</updated>
    
    <content type="html"><![CDATA[<p>所以在软件开发这一行业，程序员溢价很高其实是很正常的一件事情。低估和高估都靠你和 HR 来怎么 battle 以及面试过程中如何体现出自己的核心竞争力有关</p><p>核心竞争力   不可被替代  老板才会尊重你   </p><p>如何让自己 在公司里被尊重    背景出生   地位  成就  贡献  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;所以在软件开发这一行业，程序员溢价很高其实是很正常的一件事情。低估和高估都靠你和 HR 来怎么 battle 以及面试过程中如何体现出自己的核心竞争力有关&lt;/p&gt;
&lt;p&gt;核心竞争力   不可被替代  老板才会尊重你   &lt;/p&gt;
&lt;p&gt;如何让自己 在公司里被尊重    背景</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://pavaneyu.github.io/2022/05/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AC%94%E8%AE%B0/"/>
    <id>https://pavaneyu.github.io/2022/05/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AC%94%E8%AE%B0/</id>
    <published>2022-05-18T08:59:31.214Z</published>
    <updated>2022-06-13T04:30:14.109Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><img src="https://s2.loli.net/2022/05/18/enw3HQ5AuiUDBra.png" alt="image-20220518170434986" style="zoom: 200%;"><h1 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h1><p>怎么拆分   拆分程度   </p><p>如何远程调用   </p><p><img src="https://s2.loli.net/2022/05/18/r47Afonqg9lMa25.png"></p><p><img src="https://s2.loli.net/2022/05/20/OY6MHSu9jzDpkAn.png" alt="image-20220520204730436"></p><p><img src="https://s2.loli.net/2022/05/20/wUeKC9NAghWnuf4.png" alt="image-20220520205005224"></p><p>注册中心   1.服务发现负载均衡选最优   2.心跳检测 感知健康</p><p><img src="https://s2.loli.net/2022/05/20/SwKY67DazJxIdie.png" alt="image-20220520210140000"></p><p><img src="https://s2.loli.net/2022/05/20/BgPzLwjqW6YSVRi.png" alt="image-20220520210637958"></p><p><img src="https://s2.loli.net/2022/05/20/lOBRCMmg2wjPkZc.png" alt="image-20220520212703976"></p><p>Ribbon 的默认 负载均衡    round  robin   轮询 </p><p><img src="https://s2.loli.net/2022/05/20/ycSj4Kf7u5NOihA.png" alt="image-20220520214556695"></p><p><img src="https://s2.loli.net/2022/05/20/YS42WCONeFjJMtz.png" alt="image-20220520215023697"></p><p><img src="https://s2.loli.net/2022/05/20/uAnVH2sTw7G6513.png" alt="image-20220520220635418"></p><p><img src="https://s2.loli.net/2022/05/20/rhcFto5Cq4VH1P9.png" alt="image-20220520220651390"></p><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220520221410275.png" alt="image-20220520221410275"></p><p><img src="https://s2.loli.net/2022/05/21/ydMgQclKPTew3EH.png" alt="image-20220521093826763"></p><p><img src="https://s2.loli.net/2022/05/21/mOgnbLiBRyshe4K.png" alt="image-20220521102026409"></p><p><img src="https://s2.loli.net/2022/05/22/eoW9xJGcLqNylrB.png" alt="image-20220522224249435"></p><p>配置文件里 nameSpace没有设置              nameSpace就在默认public下</p><h1 id="nacos-配置管理"><a href="#nacos-配置管理" class="headerlink" title="nacos 配置管理"></a>nacos 配置管理</h1><p><img src="https://s2.loli.net/2022/05/24/AJwfavZTB6qNoed.png" alt="    "></p><p><img src="https://s2.loli.net/2022/05/24/L5m7tSYyrxazg6A.png" alt="image-20220524113411227"></p><p><img src="https://s2.loli.net/2022/05/24/UpFsIfK3MP9cBbo.png"></p><h1 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h1><p><img src="https://s2.loli.net/2022/05/24/Jom1H37sDVflRTU.png" alt="image-20220524121200080"></p><h1 id="配置文件-在多环境共享"><a href="#配置文件-在多环境共享" class="headerlink" title="配置文件 在多环境共享"></a>配置文件 在多环境共享</h1><p><img src="https://s2.loli.net/2022/05/24/sGAcz9r4wnTJ2eu.png" alt="image-20220524135725922"></p><h1 id="nacos-集群"><a href="#nacos-集群" class="headerlink" title="nacos 集群"></a>nacos 集群</h1><p><img src="https://s2.loli.net/2022/05/24/FWeJ4PpoVRhvn71.png" alt="image-20220524152807660"></p><h1 id="Feign-服务调用"><a href="#Feign-服务调用" class="headerlink" title="Feign  服务调用"></a>Feign  服务调用</h1><p><img src="https://s2.loli.net/2022/05/24/O6UcaIJBVTXep4j.png" alt="image-20220524153002261"></p><p><img src="https://s2.loli.net/2022/05/24/YLbHai4sBdF1Elg.png" alt="image-20220524153323979"></p><p><img src="https://s2.loli.net/2022/05/24/ODTpyH6o3KPzaBN.png" alt="image-20220524164625370"></p><p><img src="https://s2.loli.net/2022/05/24/xIzSEqt9Tsr2GBL.png" alt="image-20220524165521054"></p><h1 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h1><p><img src="https://s2.loli.net/2022/05/24/dvYVoEBta5APefr.png" alt="image-20220524193012628"></p><p><img src="https://s2.loli.net/2022/05/24/ofkt9QnGgHj4vJc.png" alt="image-20220524193137867"></p><p><img src="https://s2.loli.net/2022/05/24/1HPMNKyLakJwmc5.png" alt="image-20220524193430411"></p><p><img src="https://s2.loli.net/2022/05/24/cGvkMwg4QS5sUqy.png" alt="image-20220524193604458"></p><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220527211907110.png" alt="image-20220527211907110"></p><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220527230247565.png" alt="image-20220527230247565"></p><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220527231009681.png" alt="image-20220527231009681"></p><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220527232312531.png" alt="image-20220527232312531"></p><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220527232333681.png" alt="image-20220527232333681"></p><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220527232715324.png" alt="image-20220527232715324"></p><h1 id="centos7-配置docker"><a href="#centos7-配置docker" class="headerlink" title="centos7 配置docker"></a>centos7 配置docker</h1><h2 id="安装-yum"><a href="#安装-yum" class="headerlink" title="安装  yum"></a>安装  yum</h2><p>yum install -y yum-utils <br>           device-mapper-persistent-data <br>           lvm2 –skip-broken</p><h2 id="yum的镜像源"><a href="#yum的镜像源" class="headerlink" title="yum的镜像源"></a>yum的镜像源</h2><p>yum-config-manager <br>    –add-repo <br>    <a href="https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p><p>sed -i ‘s&#x2F;download.docker.com&#x2F;mirrors.aliyun.com/docker-ce&#x2F;g’ &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo</p><p>yum makecache fast</p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>yum install -y docker-ce</p><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 关闭</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"># 禁止开机启动防火墙</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker  # 启动docker服务</span><br><span class="line"></span><br><span class="line">systemctl stop docker  # 停止docker服务</span><br><span class="line"></span><br><span class="line">systemctl restart docker  # 重启docker服务</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查看docker版本"><a href="#查看docker版本" class="headerlink" title="查看docker版本"></a>查看docker版本</h2><p>docker -v</p><h2 id="配置docker-minor"><a href="#配置docker-minor" class="headerlink" title="配置docker minor"></a>配置docker minor</h2><p><img src="https://s2.loli.net/2022/05/28/NrwuiayXFjKvQzS.png" alt="image-20220528114235500"></p><p><img src="https://s2.loli.net/2022/05/28/CgGAOTPluV8yXbR.png" alt="image-20220528120904821"></p><p><img src="https://s2.loli.net/2022/05/28/EMnv4zchwsR19yB.png" alt="image-20220528203541545"></p><h1 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h1><h2 id="同步调用"><a href="#同步调用" class="headerlink" title="同步调用"></a>同步调用</h2><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220609222234773.png" alt="image-20220609222234773"></p><h2 id="异步调用-事件驱动-由broker-通知-其他人-订阅"><a href="#异步调用-事件驱动-由broker-通知-其他人-订阅" class="headerlink" title="异步调用    事件驱动    由broker 通知  其他人 订阅"></a>异步调用    事件驱动    由broker 通知  其他人 订阅</h2><ul><li><p>服务<strong>解耦</strong>   新增功能 不需要改原来代码</p></li><li><p>没有强依赖 ,不存在级联失败</p></li><li><p>broker做为事件队列   可以<strong>削峰</strong> </p></li><li><p>要求 broker可靠 吞吐高    调用流程不好追踪 </p><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220609223707547.png" alt="image-20220609223707547"></p></li></ul><h1 id="kafka-具有高吞吐-但可靠性一般-适合做-日志"><a href="#kafka-具有高吞吐-但可靠性一般-适合做-日志" class="headerlink" title="kafka  具有高吞吐  但可靠性一般  适合做 日志"></a>kafka  具有高吞吐  但可靠性一般  适合做 日志</h1><h1 id="Spring-AMQP"><a href="#Spring-AMQP" class="headerlink" title="Spring AMQP"></a>Spring AMQP</h1><p><img src="https://s2.loli.net/2022/06/10/Dbal6UIHpjouZtP.png" alt="image-20220610152231272"></p><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220610152405756.png" alt="image-20220610152405756"></p><p>#fanout  广播交换机</p><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220610183836189.png" alt="image-20220610183836189"></p><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220610181121172.png" alt="image-20220610181121172"></p><h1 id="direct-exchange-根据bindingkey-直接路由到-队列"><a href="#direct-exchange-根据bindingkey-直接路由到-队列" class="headerlink" title="direct exchange   根据bindingkey  直接路由到  队列"></a>direct exchange   根据bindingkey  直接路由到  队列</h1><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220610191913462.png" alt="image-20220610191913462"></p><p><img src="https://s2.loli.net/2022/06/10/z4jIvgt85lmai6o.png" alt="image-20220610195950320"></p><h1 id="topic-exchange-根据-通配符的key-路由"><a href="#topic-exchange-根据-通配符的key-路由" class="headerlink" title="topic exchange    根据 通配符的key   路由"></a>topic exchange    根据 通配符的key   路由</h1><p><img src="https://s2.loli.net/2022/06/10/Xw5KyTNxGiPtFrn.png" alt="image-20220610200946034"></p><h1 id="自定义消息序列化-pc两端相同"><a href="#自定义消息序列化-pc两端相同" class="headerlink" title="自定义消息序列化   pc两端相同"></a>自定义消息序列化   pc两端相同</h1><p><img src="https://s2.loli.net/2022/06/10/4edJq58t3FGsIAE.png" alt="image-20220610221009677"></p><ul><li>comsumer  端也要定义bean   跟 p端 相同</li></ul><h1 id="ES倒排索引"><a href="#ES倒排索引" class="headerlink" title="ES倒排索引"></a>ES倒排索引</h1><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220611122727545.png" alt="image-20220611122727545"></p><h1 id="es-相比于mysql-更擅长-检索"><a href="#es-相比于mysql-更擅长-检索" class="headerlink" title="es 相比于mysql   更擅长  检索"></a>es 相比于mysql   更擅长  检索</h1><p><img src="https://s2.loli.net/2022/06/11/m9vzSkqiIep6ZLb.png" alt="image-20220611125007471"></p><h1 id="IK-分词器"><a href="#IK-分词器" class="headerlink" title="IK 分词器"></a>IK 分词器</h1><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220611140122649.png" alt="image-20220611140122649"></p><h1 id="RestClient"><a href="#RestClient" class="headerlink" title="RestClient"></a>RestClient</h1><p><img src="https://s2.loli.net/2022/06/11/ahXUjGTv32A6tkx.png" alt="image-20220611155056589"></p><p><img src="https://s2.loli.net/2022/06/11/MARmogB48nL3eT6.png" alt="image-20220611160648349"></p><p><img src="https://s2.loli.net/2022/06/11/Nh4Ug7A9ButoMlm.png" alt="image-20220611172230394"></p><h1 id="微服务保护专题"><a href="#微服务保护专题" class="headerlink" title="微服务保护专题"></a>微服务保护专题</h1><h2 id="由一个服务失效带来的雪崩问题"><a href="#由一个服务失效带来的雪崩问题" class="headerlink" title="由一个服务失效带来的雪崩问题"></a>由一个服务失效带来的雪崩问题</h2><p><img src="https://s2.loli.net/2022/06/12/FDYvlWyGEH4XQN3.png" alt="image-20220612134217998"></p><h1 id="sentinal-安装"><a href="#sentinal-安装" class="headerlink" title="sentinal 安装"></a>sentinal 安装</h1><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220612145646777.png" alt="image-20220612145646777"></p><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220612150748409.png" alt="image-20220612150748409"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;img src=&quot;https://s2.loli.net/2022/05/18/enw3HQ5AuiUDBra.png&quot; alt=&quot;image-20220518170434986&quot; style=&quot;zoom: 200%;&quot;&gt;

&lt;h1 id=&quot;服务治理&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JUC笔记</title>
    <link href="https://pavaneyu.github.io/2022/03/29/JUC/"/>
    <id>https://pavaneyu.github.io/2022/03/29/JUC/</id>
    <published>2022-03-29T13:40:06.279Z</published>
    <updated>2022-07-01T06:29:42.675Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="什么是线程上下文切换"><a href="#什么是线程上下文切换" class="headerlink" title="什么是线程上下文切换"></a>什么是线程上下文切换</h1><p>用户态切换到内核态    同时 程序计数器和寄存器也会切换过来</p><p><img src="https://s2.loli.net/2022/06/19/7Neq536FVX2kT9y.png" alt="image-20220619094425643"></p><p><img src="https://s2.loli.net/2022/04/01/sxPhCjEHZQqcOzm.png" alt="image-20220401170004154"></p><h1 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AtomicReference&lt;String&gt; re = new AtomicReference&lt;&gt;();</span><br></pre></td></tr></table></figure><h1 id="原子时间戳引用-解决-ABA-问题"><a href="#原子时间戳引用-解决-ABA-问题" class="headerlink" title="原子时间戳引用  解决   ABA 问题"></a>原子时间戳引用  解决   ABA 问题</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AtomicStampedReference&lt;String&gt; stampedReference = new AtomicStampedReference&lt;&gt;(&quot;a&quot;, 1);</span><br></pre></td></tr></table></figure><h1 id="集合线程不安全问题"><a href="#集合线程不安全问题" class="headerlink" title="集合线程不安全问题"></a>集合线程不安全问题</h1><ul><li>第一代集合类  vector</li><li>collections.syncList </li><li>第三代  concurrentHashmap     copyonwriteArrayList</li></ul><h1 id="可重入锁-递归锁-可以防止死锁"><a href="#可重入锁-递归锁-可以防止死锁" class="headerlink" title="可重入锁  (递归锁)         可以防止死锁"></a>可重入锁  (递归锁)         可以防止死锁</h1><p>同一线程在外层方法获取锁  时候,,进入内层方法 自动获取该锁 </p><p>即 线程可以进入 锁内  任意代码块 </p><h1 id="自旋锁-见-CAS自旋-java"><a href="#自旋锁-见-CAS自旋-java" class="headerlink" title="自旋锁   见 CAS自旋.java"></a>自旋锁   见 CAS自旋.java</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//不会立即阻塞,而是循环的方式获取锁</span><br><span class="line">//避免线程切换的上下文开销,但是会消耗CPU</span><br></pre></td></tr></table></figure><h1 id="可重入读写锁"><a href="#可重入读写锁" class="headerlink" title="可重入读写锁"></a>可重入读写锁</h1><p>相比于可重入锁    锁的粒度更细</p><h1 id="阻塞队列-满了后再添加会阻塞-直到移除一个"><a href="#阻塞队列-满了后再添加会阻塞-直到移除一个" class="headerlink" title="阻塞队列  满了后再添加会阻塞 ,直到移除一个"></a>阻塞队列  满了后再添加会阻塞 ,直到移除一个</h1><p>一直阻塞   还是阻塞一段时间后 自动 退出</p><p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20220619152026744.png" alt="image-20220619152026744"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">offer 和take 失败  不会阻塞   ,但如果加上时间参数,就会在给定的时间内阻塞</span><br><span class="line">put 和take   失败会一直阻塞  </span><br><span class="line"></span><br><span class="line">可以阻塞的,都会抛出打断异常 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BlockingQueue&lt;String&gt; strings = new ArrayBlockingQueue&lt;String&gt;(3);</span><br><span class="line">//基于数组的阻塞队列  满了还添加会阻塞,也可以设定一定时间后自动消亡</span><br><span class="line">BlockingQueue&lt;String&gt; strings1 = new LinkedBlockingQueue&lt;&gt;(3);</span><br><span class="line">BlockingQueue&lt;String&gt; blocking = new SynchronousQueue&lt;&gt;();</span><br><span class="line">//同步队列 ,put和take 同步,只存在一个元素</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;什么是线程上下文切换&quot;&gt;&lt;a href=&quot;#什么是线程上下文切换&quot; class=&quot;headerlink&quot; title=&quot;什么是线程上下文切换&quot;&gt;&lt;/a&gt;什么是线程上下文切换&lt;/h1&gt;&lt;p&gt;用户态切换到内核态    同时 程序计数器和寄存器</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://pavaneyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="思考" scheme="https://pavaneyu.github.io/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>redis面试题</title>
    <link href="https://pavaneyu.github.io/2022/03/14/%E9%9D%A2%E8%AF%95/redis%E9%9D%A2%E8%AF%95/"/>
    <id>https://pavaneyu.github.io/2022/03/14/%E9%9D%A2%E8%AF%95/redis%E9%9D%A2%E8%AF%95/</id>
    <published>2022-03-14T05:21:16.178Z</published>
    <updated>2022-07-05T12:33:35.685Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="redis数据结构"><a href="#redis数据结构" class="headerlink" title="redis数据结构"></a>redis数据结构</h1><p>string list  set  zset   hash    </p><p>高级结构，HyperLogLog  <strong>基数统计</strong>、Geo <strong>地理位置</strong>、<strong>BloomFilter</strong>  <strong>布隆过滤</strong></p><h1 id="为什么快-特点"><a href="#为什么快-特点" class="headerlink" title="为什么快   特点"></a>为什么快   特点</h1><ul><li>基于内存，读写快，单机Redis能处理10W+的请求</li><li>单线程，避免上下文切换的时间消耗</li><li>非阻塞的多路IO复用</li></ul><h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><p>RDB 快照  默认开启   数据有遗失  但恢复快</p><p>AOF                              恢复慢  但是数据全,用来追加缺失的数据 </p><p>一般两者结合使用</p><h1 id="内存淘汰策略-默认LRU-最近最少使用"><a href="#内存淘汰策略-默认LRU-最近最少使用" class="headerlink" title="内存淘汰策略 -默认LRU,最近最少使用"></a>内存淘汰策略 -默认LRU,最近最少使用</h1><h1 id="缓存穿透-查询空的对象"><a href="#缓存穿透-查询空的对象" class="headerlink" title="缓存穿透(查询空的对象)"></a>缓存穿透(查询空的对象)</h1><p>1.<strong>布隆过滤器  如果不存在的话,直接返回 连缓存都不用查</strong></p><p>2**.缓存空值      配置文件 里cache-null-values&#x3D;true**</p><h1 id="缓存击穿-被频繁访问的一个key-在过期的时候导致"><a href="#缓存击穿-被频繁访问的一个key-在过期的时候导致" class="headerlink" title="缓存击穿(被频繁访问的一个key,在过期的时候导致)"></a>缓存击穿(被频繁访问的一个key,在过期的时候导致)</h1><p><strong>2.加锁   ,保证每个key只能有一个线程去数据库查询   @Cacheable(cacheNames&#x3D;”menu”, sync&#x3D;”true”)</strong></p><h1 id="缓存雪崩-缓存一起失效"><a href="#缓存雪崩-缓存一起失效" class="headerlink" title="缓存雪崩 缓存一起失效"></a>缓存雪崩 缓存一起失效</h1><ul><li><strong>过期时间加随机值</strong></li></ul><h1 id="缓存-数据库一致性"><a href="#缓存-数据库一致性" class="headerlink" title="缓存 数据库一致性"></a>缓存 数据库一致性</h1><ul><li><p>先删除缓存再 更新数据库    </p><ul><li>如果中间有请求过来   访问数据库就会把旧数据写入缓存   , 造成不一致</li></ul></li><li><p>先更新数据 再删除缓存   </p><ul><li>如果中间有请求过来  会访问 旧的缓存数据, 但更  新完成就好了</li></ul></li><li><p>异步更新缓存  ,数据库更新  发送到mq 由redis自己消费</p></li><li><p>删除缓存失败? 消息队列补偿    canal 监听binlog   即监听数据库数据变化</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;redis数据结构&quot;&gt;&lt;a href=&quot;#redis数据结构&quot; class=&quot;headerlink&quot; title=&quot;redis数据结构&quot;&gt;&lt;/a&gt;redis数据结构&lt;/h1&gt;&lt;p&gt;string list  set  zset   hash</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://pavaneyu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>网络相关面试题</title>
    <link href="https://pavaneyu.github.io/2022/03/08/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C%E5%92%8C%E5%85%B6%E4%BB%96/"/>
    <id>https://pavaneyu.github.io/2022/03/08/%E9%9D%A2%E8%AF%95/%E7%BD%91%E7%BB%9C%E5%92%8C%E5%85%B6%E4%BB%96/</id>
    <published>2022-03-08T08:15:07.655Z</published>
    <updated>2022-06-20T10:28:59.712Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="Http与https"><a href="#Http与https" class="headerlink" title="Http与https"></a>Http与https</h1><p>在http的基础上加了SSL加密传输协议,也就是安全套接层,这两个端口分别是80和443 ,另外https需要收费的CA证书</p><h1 id="TCP与UDP"><a href="#TCP与UDP" class="headerlink" title="TCP与UDP"></a>TCP与UDP</h1><p>传输控制协议   面向连接  通过三次握手确保可靠连接   </p><p>用户数据报      无连接不可靠       数据包可能丢失</p><h1 id="浏览器输入-URL-回车之后发生了什么"><a href="#浏览器输入-URL-回车之后发生了什么" class="headerlink" title="浏览器输入 URL 回车之后发生了什么"></a><strong>浏览器输入 URL 回车之后发生了什么</strong></h1><ul><li>Url解析  判断是一个搜索的关键字还是合法的url  </li><li>DNS解析   返回域名    先从缓存 查  host文件 查   本地dns    根域名服务器</li><li>建立tcp连接  </li><li>浏览器发送http请求</li><li>服务器相应并返回页面</li><li>浏览器渲染页面</li></ul><h1 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h1><ul><li><p>文件与目录</p><ul><li>ls 文件列表</li><li>cd 切换目录</li><li>mkdir创建目录</li><li></li><li>cp 复制</li><li>mv  移动</li><li>find 查找文件</li><li>cat查看文件</li><li>tar 压缩文件</li><li>grep 文本搜索</li></ul></li><li><p>进程</p><ul><li>ps 进程列表</li><li>kill </li><li>top 显示进程的资源占用</li></ul></li><li><p>网络 </p><ul><li>netstat  -anp |grep 8080</li></ul></li></ul><h1 id="三次握手-四次挥手过程"><a href="#三次握手-四次挥手过程" class="headerlink" title="三次握手  四次挥手过程"></a>三次握手  四次挥手过程</h1><p>a-&gt;b  发送一个同步序列号SYN</p><p>a&lt;-b  发送一个确认应答ACK  和同步序列号SYN </p><p>a-&gt;b   发送一个确认应答</p><p>a把正方向的控制位FIN置为1</p><p>b确认 ACK置为1</p><p>b把反方向 控制位FIN置为1</p><p>a确认ACK置为1</p><h1 id="http2-0"><a href="#http2-0" class="headerlink" title="http2.0"></a>http2.0</h1><ul><li>二进制分帧  将http响应 划分为    headers 和data 的两个 frame   并且采用二进制编码</li><li>多路复用  一个TCP连接多个通信</li><li>头部压缩  一个网页的很多请求头都是相同的           可以维护一份动态字典   第二次传输索引就行</li><li>服务器端推送</li></ul><h1 id="rpc与http"><a href="#rpc与http" class="headerlink" title="rpc与http"></a>rpc与http</h1><p>RPC主要是基于TCP&#x2F;IP协议的，而HTTP服务主要是基于HTTP协议</p><p>RPC基于长链接，不必3次握手，减少了网络开销；</p><p>其次就是RPC框架一般都有注册中心，有丰富的监控管理；发布、下线接口、动态扩展等，对调用方来说是无感知、统一化的操作。</p><h1 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h1><p>200成功 </p><p>3** 重定向</p><p>4**客户端请求错误</p><p>5**服务端错误 </p><h1 id="NginX-如何做负载均衡、常见的负载均衡算法有哪些、一致性哈希的一致性是什么意思"><a href="#NginX-如何做负载均衡、常见的负载均衡算法有哪些、一致性哈希的一致性是什么意思" class="headerlink" title="NginX 如何做负载均衡、常见的负载均衡算法有哪些、一致性哈希的一致性是什么意思"></a>NginX 如何做负载均衡、常见的负载均衡算法有哪些、一致性哈希的一致性是什么意思</h1><p>**随机、加权随机、轮询、加权轮询 **<strong>源地址hash、最小连接数法</strong></p><h1 id="linux相关"><a href="#linux相关" class="headerlink" title="linux相关"></a>linux相关</h1><p><a href="https://github.com/moxi624/LearningNotes/blob/master/%E6%A0%A1%E6%8B%9B%E9%9D%A2%E8%AF%95/JUC/13_Linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/README.md">https://github.com/moxi624/LearningNotes/blob/master/%E6%A0%A1%E6%8B%9B%E9%9D%A2%E8%AF%95/JUC/13_Linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/README.md</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;Http与https&quot;&gt;&lt;a href=&quot;#Http与https&quot; class=&quot;headerlink&quot; title=&quot;Http与https&quot;&gt;&lt;/a&gt;Http与https&lt;/h1&gt;&lt;p&gt;在http的基础上加了SSL加密传输协议,也就是安</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://pavaneyu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring和Boot面试题</title>
    <link href="https://pavaneyu.github.io/2022/02/26/%E9%9D%A2%E8%AF%95/Spring%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://pavaneyu.github.io/2022/02/26/%E9%9D%A2%E8%AF%95/Spring%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-02-26T10:17:15.442Z</published>
    <updated>2022-06-27T09:38:39.329Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="Springboot帮你配置了什么"><a href="#Springboot帮你配置了什么" class="headerlink" title="Springboot帮你配置了什么?"></a>Springboot帮你配置了什么?</h1><ul><li>webmvcautoconfuguration   读取webmvcproperties文件中的默认信息</li></ul><h1 id="boot配置文件加载顺序"><a href="#boot配置文件加载顺序" class="headerlink" title="boot配置文件加载顺序"></a>boot配置文件加载顺序</h1><ul><li><p>当前项目下  config目录有没有配置文件</p></li><li><p>当前项目下有没有配置文件 </p></li><li><p>resources下的config目录有没有配置文件</p></li><li><p>resources目录下有没有配置文件</p><h1 id="boot读取配置文件"><a href="#boot读取配置文件" class="headerlink" title="boot读取配置文件"></a>boot读取配置文件</h1><p>@value  @ConfigurationProperties</p></li></ul><h1 id="BeanFactory-与ApplicationContext"><a href="#BeanFactory-与ApplicationContext" class="headerlink" title="BeanFactory 与ApplicationContext"></a>BeanFactory 与ApplicationContext</h1><ul><li>ApplicationContext  是BeanFactory的子接口</li><li>ApplicationContext  启动的时候就实例化bean,不会等到要用时候 </li><li>优先选择ApplicationContext</li></ul><h1 id="Spring-和MVC-和boot-区别"><a href="#Spring-和MVC-和boot-区别" class="headerlink" title="Spring   和MVC  和boot  区别"></a>Spring   和MVC  和boot  区别</h1><ul><li>Spring 是轻量级java框架,核心是IOC与AOP  还有其他的Spring全家桶</li><li>MVC是基于Spring的MVC框架,解决web开发问题</li><li>boot是为了简化开发 可以快速创建应用,  convention  over configuration 原则  <ul><li>内嵌web容器 摒弃了繁琐的xml配置    starter方便 整合其他框架</li></ul></li></ul><h1 id="MVC流程-以dispatchServlet为核心-7步"><a href="#MVC流程-以dispatchServlet为核心-7步" class="headerlink" title="MVC流程 ?   以dispatchServlet为核心   7步"></a>MVC流程 ?   以dispatchServlet为核心   7步</h1><p><img src="https://s2.loli.net/2022/02/27/trOmcIeqFvKywXJ.png" alt="SpringMVC.jpg"></p><h1 id="spring中-component和-Bean的区别"><a href="#spring中-component和-Bean的区别" class="headerlink" title="spring中@component和@Bean的区别"></a>spring中@component和@Bean的区别</h1><ol><li>@Component是在类上面的注解,便于这个组件被扫描到,</li><li>@Bean是标在配置类的方法上面,表示将方法的返回类型作为一个Bean,默认组件名字为方法名</li><li>在将第三方类注册到Spring中,由于不能修改源代码,只能在配置类里面@Bean注册到Spring</li></ol><h1 id="单例Bean不是线程安全的"><a href="#单例Bean不是线程安全的" class="headerlink" title="单例Bean不是线程安全的"></a>单例Bean不是线程安全的</h1><ul><li><p>Bean默认单例,是线程不安全的  ,不要在bean定义成员变量        要定义使用ThreadLocal</p></li><li><p>如果 @scope作用域设为原型,则每次都创建新的对象,则没有线程安全问题</p></li></ul><h1 id="Spring事务隔离级别-Isolation枚举类的五个值"><a href="#Spring事务隔离级别-Isolation枚举类的五个值" class="headerlink" title="Spring事务隔离级别 Isolation枚举类的五个值 ?"></a>Spring事务隔离级别 Isolation枚举类的五个值 ?</h1><ul><li><p>默认  ,也就是采用后端数据库的隔离级别    </p></li><li><p>读取未提交内容  –产生<strong>脏读</strong>  幻读  不可重复读 很少用</p></li><li><p>读取已提交内容 – 避免了脏读  但是有幻读和不可重复读的问题</p></li><li><p>可重复读  -默认隔离级别 ,可能产生<strong>幻读</strong>  InnoDB引擎通过多版本并发控制来解决幻读问题</p></li><li><p>串行化–最高级别的隔离,通过<strong>强制事务排序</strong>,在每个读的数据行加锁,但可能有超时和锁竞争</p></li></ul><h1 id="Spring事务传播propogation机制"><a href="#Spring事务传播propogation机制" class="headerlink" title="Spring事务传播propogation机制"></a>Spring事务传播propogation机制</h1><ul><li>需要 required     默认传播机制    有就加入 没有新建</li><li>需要新的  required_new              必须新建,旧的挂起</li><li>支持  support          有就加入 没有算了  </li><li>不支持  notSupport   不应该运行在事务中  ,有就挂起</li><li>强制 mandatory       必须运行在事务中,没有就抛出异常</li><li>从不  never                不应该运行在事务中,有就抛出异常</li><li>嵌套  nested            嵌套运行</li></ul><h1 id="Spring设计模式"><a href="#Spring设计模式" class="headerlink" title="Spring设计模式"></a>Spring设计模式</h1><p>1.工厂模式   BeanFactory   Applicatio  nContext </p><p>2..代理模式   AOP 用的就是动态代理</p><p>3.单例  bean 默认就是单例</p><p>4.观察者模式  ApplicationEvent   ApplicationListoner</p><p>5.适配器模式   </p><p>6.装饰者模式   wrapper   decorator</p><h1 id="Spring声明式事务实现原理"><a href="#Spring声明式事务实现原理" class="headerlink" title="Spring声明式事务实现原理"></a>Spring声明式事务实现原理</h1><ul><li>通过aop动态代理</li></ul><h1 id="transactional-失效的场景"><a href="#transactional-失效的场景" class="headerlink" title="transactional 失效的场景"></a>transactional 失效的场景</h1><ul><li><p>propagation 或者 rollbackfor 属性设置错误</p></li><li><p>非public方法  因为cglib动态代理 是重写 父类方法的   必须保证能够被重写</p></li><li><p>被同类方法调用,没有走 代理</p></li><li><p>异常被捕获, 导致无法因为异常而回滚 , 需要再catch里面  手动 回滚</p><p><img src="../../../../../AppData/Roaming/Typora/typora-user-images/image-20220624180003715.png" alt="image-20220624180003715"></p></li></ul><h1 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h1><ul><li>@scope</li><li>单例</li><li>原型</li><li>request</li><li>session</li><li>globle session</li></ul><h1 id="Bean的生命周期-Spring怎么创建bean"><a href="#Bean的生命周期-Spring怎么创建bean" class="headerlink" title="Bean的生命周期(Spring怎么创建bean)"></a>Bean的生命周期(Spring怎么创建bean)</h1><p> doCreateBean() 方法中有四个步骤</p><ul><li>如果bean为空,createBeanInstance()<strong>实例化</strong></li><li>populateBean给bena<strong>赋值</strong></li><li>initializeBean()  <strong>初始化</strong>bean   <ul><li>Aware接口依赖注入</li><li>beanPostProcesso r 前后处理</li><li>init-method  执行初始化方法</li></ul></li><li>registerDisposableBeanIfNecessary  <strong>销毁</strong></li></ul><h1 id="说说aop"><a href="#说说aop" class="headerlink" title="说说aop"></a>说说aop</h1><p>面向切面编程,通过动态代理实现   ,包括切面,切点,前后置通知,增强 组成,</p><p>可以在不改变原有类的情况下，能动态的添加某些功能</p><p>实际中日志,  监控 ,和声明式事务 都是aop实现的</p><h1 id="AOP动态代理中-jdk与cglib区别"><a href="#AOP动态代理中-jdk与cglib区别" class="headerlink" title="AOP动态代理中  jdk与cglib区别"></a>AOP动态代理中  jdk与cglib区别</h1><ul><li>jdk:  前提有接口  生成动态代理类proxy   实现目标类的接口  通过反射增强方法</li><li>cglib:生成的代理类 是  目标类的子类  重写父类方法</li></ul><h1 id="Spring中类的属性注入"><a href="#Spring中类的属性注入" class="headerlink" title="Spring中类的属性注入"></a>Spring中类的属性注入</h1><ul><li>如果属性是必须的,使用构造器注入可以防止NPE</li><li>如果属性是可选的,使用setter方法上加@Autowired注入</li><li>filed 注入不推荐使用</li></ul><h1 id="spring怎么解决循环依赖的"><a href="#spring怎么解决循环依赖的" class="headerlink" title="spring怎么解决循环依赖的"></a>spring怎么解决循环依赖的</h1><p>Spring能解决setter注入的循环依赖了，因为实例化和属性赋值是分开的</p><ul><li><strong>属性赋值</strong>，过程，Spring 通过<strong>三级缓存</strong><ul><li>​    一级缓存 是 单例池  保存          完全初始化完成的bean</li><li>二级缓存 是早期曝光对象 保存    仅实例化后的bean</li><li>三级缓存是  bean创建工厂  以便以后有机会创建代理对象</li></ul></li></ul><h1 id="Springboot常用注解"><a href="#Springboot常用注解" class="headerlink" title="Springboot常用注解"></a>Springboot常用注解</h1><ul><li><p>启动类的SpringBootApplication  这个是一个复合注解 他包含   Configuration  EnableAutoConfiguration    ComponentScan</p></li><li><p>web相关</p><ul><li><p>cotroller  ,RestController 用在控制层,其中后者将返回对象直接作为响应体</p></li><li><p>@RequestMapping 请求映射  ,分得更细一点GetMapping  PostMapping</p></li><li><p>在方法参数里面   @pathvariable     @RequestParam获取请求头里面参数</p></li></ul></li><li><p>容器相关  </p><ul><li>@Repository  用在dao层  @Service用在服务层   通用的话就是@Component </li><li>@Autowired 按类型注入  @resouces按名称导入</li><li>@bean 标在配置类的方法上面,表示将方法的返回类型作为一个组件</li></ul></li><li><p>声明式事务管理  @Transactional</p></li></ul><h1 id="Autowired的实现原理"><a href="#Autowired的实现原理" class="headerlink" title="@Autowired的实现原理"></a>@Autowired的实现原理</h1><p>Bean后置处理器   <strong>AutowiredAnnotationBeanPostProcessor</strong></p><h1 id="SpringBoot自动配置原理"><a href="#SpringBoot自动配置原理" class="headerlink" title="SpringBoot自动配置原理"></a>SpringBoot自动配置原理</h1><p><code>@SpringBootApplication</code>等同于下面三个注解：</p><ul><li><p><code>@SpringBootConfiguration</code></p></li><li><p><code>@EnableAutoConfiguration</code></p><p><code>@ComponentScan</code></p></li></ul><p>其中<code>@EnableAutoConfiguration</code>是关键内部实际上就去加载<code>META-INF/spring.factories</code>文件的信息，然后筛选出以<code>EnableAutoConfiguration</code>为key的数据，加载到IOC容器中，实现自动配置功能！</p><h1 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h1><ul><li>包含两个信息   依赖  和 配置</li><li>@ConfigurationProperties定义配置类  </li><li>编写自动配置类   @Configuration   @EnableConfigurationProperties  开启配置属性</li><li>spring.factories 添加自动配置类的路径</li><li></li><li>在maven中intall 到本地仓库  或者deploy到远程仓库</li></ul><h1 id="Servlet-生命周期"><a href="#Servlet-生命周期" class="headerlink" title="Servlet 生命周期"></a>Servlet 生命周期</h1><ul><li>init方法 初始化</li><li>service方法  自动派遣与请求对应的（doGet，doPost）方法</li><li>destroy方法</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;Springboot帮你配置了什么&quot;&gt;&lt;a href=&quot;#Springboot帮你配置了什么&quot; class=&quot;headerlink&quot; title=&quot;Springboot帮你配置了什么?&quot;&gt;&lt;/a&gt;Springboot帮你配置了什么?&lt;/h</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://pavaneyu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>JVM面试题</title>
    <link href="https://pavaneyu.github.io/2022/02/26/%E9%9D%A2%E8%AF%95/JVM%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://pavaneyu.github.io/2022/02/26/%E9%9D%A2%E8%AF%95/JVM%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-02-26T09:19:32.183Z</published>
    <updated>2022-06-20T09:45:49.100Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="内存泄漏与内存溢出"><a href="#内存泄漏与内存溢出" class="headerlink" title="内存泄漏与内存溢出"></a>内存泄漏与内存溢出</h1><p>无法释放已申请的内存空间</p><p>进而导致新的应用没有足够的内存空间</p><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><h1 id="内存快照抓取"><a href="#内存快照抓取" class="headerlink" title="内存快照抓取"></a>内存快照抓取</h1><h1 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h1><p>1.加载  &#x3D;&#x3D;双亲委派&#x3D;&#x3D;  委托父类加载器   根加载器 —&gt; 拓展加载器 —-&gt;应用程序加载器  </p><p>2.链接</p><ul><li>验证</li><li>准备   在方法区内对静态变量分配内存,并初始化</li><li>解析    JVM将常量池的   符号引用   替换为  直接引用</li></ul><p>3.初始化</p><ul><li>执行clinit方法,   收集所有静态变量的赋值动作和静态代码块  并进行合并</li><li>JVM会保证一个类的clinit方法在多线程环境下被正确地加锁  同步</li></ul><h1 id="强引用与软引用-为什么要不同的引用类型"><a href="#强引用与软引用-为什么要不同的引用类型" class="headerlink" title="强引用与软引用?为什么要不同的引用类型"></a>强引用与软引用?为什么要不同的引用类型</h1><p>对GC回收时机不可控的补充 </p><ul><li><p>强引用   JVM不会回收 ,即使内存不足也不会被回收</p></li><li><p>软引用   内存不足的时候才会回收</p></li><li><p>弱引用   只要有GC操作就会进行回收 </p></li><li><p>虚引用    任何时候都会被回收</p></li></ul><h1 id="GC算法"><a href="#GC算法" class="headerlink" title="GC算法"></a>GC算法</h1><ul><li><p>标记-清除   不需要额外空间  但是会产生内存碎片 而且需要两次扫描</p></li><li><p>标记-整理     </p></li><li><p>复制算法     对象存活度较低的时候使用,主要在新生区</p></li></ul><p>时间复杂度最优 :复制算法&gt;标记清除&gt;标记整理</p><p>空间复杂度最优:标记清除&#x3D;标记整理&gt;复制算法</p><p>内存碎片最优:复制算法</p><h1 id="轻GC与Full-GC-分别在什么时候"><a href="#轻GC与Full-GC-分别在什么时候" class="headerlink" title="轻GC与Full GC 分别在什么时候"></a>轻GC与Full GC 分别在什么时候</h1><p>新生代用轻GC  Full GC是全局范围的GC</p><h1 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h1><p>CMS</p><h1 id="JVM分为哪些区-内存结构"><a href="#JVM分为哪些区-内存结构" class="headerlink" title="JVM分为哪些区(内存结构)?"></a>JVM分为哪些区(内存结构)?</h1><ul><li>堆:   新生代   (伊甸 和幸存区  from  to)    老年代    元空间   <ul><li>堆是被所有线程共享,存放数组和变量,也是垃圾回收的主要区域</li><li>其中在新生代 使用复制算法进行轻GC   经历了15次轻GC还未消亡就进老年代  或者根据分配担保机制大小超过时也会进入老年代</li><li>老年代 使用标记清除和标记整理进行GC</li></ul></li><li>栈:每个线程都有一个栈,存放一些<strong>基本类型和局部变量</strong></li><li>方法区:所有线程共享,包含所有<strong>类信息和静态变量</strong></li><li>程序计数器:当前线程执行的字节码的行指示器</li></ul><h1 id="判断对象是否应该被回收"><a href="#判断对象是否应该被回收" class="headerlink" title="判断对象是否应该被回收"></a>判断对象是否应该被回收</h1><ul><li>引用计数法</li><li>枚举根节点 做 可达性分析</li></ul><h1 id="获取class对象方式"><a href="#获取class对象方式" class="headerlink" title="获取class对象方式"></a><strong>获取class对象方式</strong></h1><p>1.Class.forName()<br>2.Cat.class<br>3.对象.getClass()]<br>4.类加载器.loadClass(name) </p><h1 id="JVM内存溢出怎么办"><a href="#JVM内存溢出怎么办" class="headerlink" title="JVM内存溢出怎么办?"></a>JVM内存溢出怎么办?</h1><p>1.加载数据过多   数据库查询分页                                    用的太多</p><p>2.垃圾没有GC   集合是否清空,资源是否释放                      历史积累太多</p><p>3.内存设定过小  JVM参数增加内存                                  给的太少</p><p>4.代码逻辑问题  有没有死循环递归                              自己问题</p><p>5.日志   用分析工具查看内存状态                        借助分析</p><h1 id="判断废弃常量"><a href="#判断废弃常量" class="headerlink" title="判断废弃常量"></a>判断废弃常量</h1><p>假如在常量池中存在<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a> “abc”，如果当前没有任何String对象引用该字符串常量的话，就说明常量 “abc” 就是废弃常量，</p><p>如果这时发生内存回收的话而且有必要的话，“abc” 就会被系统清理出常量池。</p><h1 id="一些学习笔记"><a href="#一些学习笔记" class="headerlink" title="一些学习笔记"></a>一些学习笔记</h1><p>排查 死锁   </p><p>  jps -l                  查看运行程序  和pid</p><p>jstack +pid  查看堆栈信息</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;内存泄漏与内存溢出&quot;&gt;&lt;a href=&quot;#内存泄漏与内存溢出&quot; class=&quot;headerlink&quot; title=&quot;内存泄漏与内存溢出&quot;&gt;&lt;/a&gt;内存泄漏与内存溢出&lt;/h1&gt;&lt;p&gt;无法释放已申请的内存空间&lt;/p&gt;
&lt;p&gt;进而导致新的应用没</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://pavaneyu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>多线程并发面试题</title>
    <link href="https://pavaneyu.github.io/2022/02/26/%E9%9D%A2%E8%AF%95/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%B9%B6%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://pavaneyu.github.io/2022/02/26/%E9%9D%A2%E8%AF%95/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%B9%B6%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-02-26T09:19:32.183Z</published>
    <updated>2022-07-02T07:35:34.458Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="结合实际聊聊JVM调优"><a href="#结合实际聊聊JVM调优" class="headerlink" title="结合实际聊聊JVM调优"></a>结合实际聊聊JVM调优</h1><h1 id="lock-与sync区别"><a href="#lock-与sync区别" class="headerlink" title="lock 与sync区别"></a>lock 与sync区别</h1><p>来源   公平      中断      升级</p><ul><li>sync是关键字   属于jvm层面               ( 锁在当前实例上,不同对象调用此方法互不影响   静态方法时,所有线程用的同一把锁)</li><li>lock是并发包下面       通过lock方法和unlock方法 实现代码块加锁</li><li></li><li>sync 是非公平锁   lock默认是非公平锁  </li><li></li><li>sync 不可中断,必须执行完成或抛出异常       lock可以中断  必须在finally中必须释放锁  </li><li></li><li>sync有一个锁升级过程     偏向锁 ,轻量级锁    重量级锁                     lock使用自旋锁实现  默认10次  避免了上下文切换</li></ul><h1 id="如何避免死锁-互请不寻"><a href="#如何避免死锁-互请不寻" class="headerlink" title="如何避免死锁(互请不寻)"></a>如何避免死锁(互请不寻)</h1><ul><li>资源<strong>互斥</strong>   threadlocal </li><li><strong>请求与保持</strong>         请求资源的同时,对已获得的资源保持不放</li><li><strong>不剥夺,</strong>    未使用完资源之前不强行剥夺</li><li>两个线程循环等待————-将系统资源设置标识位,规定所有线程申请资源</li></ul><h1 id="什么时候会释放锁"><a href="#什么时候会释放锁" class="headerlink" title="什么时候会释放锁"></a>什么时候会释放锁</h1><p>1.执行完毕或者return<br>2.发生异常释放锁<br>3.wait()释放锁<br>Thread.sleep()不会释放锁,只是眯了会,还占着坑位</p><h1 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h1><ul><li><p>轻量级的线程同步机制   </p></li><li><p>保证线程可见性      </p></li><li><p>禁止指令重排序</p></li><li><p>但是不能保证原子性</p></li></ul><h1 id="atomicInteger-的实现原理"><a href="#atomicInteger-的实现原理" class="headerlink" title="atomicInteger 的实现原理"></a>atomicInteger 的实现原理</h1><p>底层是unsafe类的getAndAddInt       用到了CAS </p><h2 id="CAS是什么-有什么问题"><a href="#CAS是什么-有什么问题" class="headerlink" title="CAS是什么?有什么问题"></a>CAS是什么?有什么问题</h2><ul><li><p>有个预期值  和新值    只有当预期值与内存中变量相同 才会更改为新值    </p></li><li><p>比较只能比较一个变量   多个<strong>变量</strong>只能用锁</p></li><li><p>如果一直比较不成功就会一直<strong>循环</strong>,CPU开销</p></li><li><p>ABA问题   原子时间戳引用可以解决</p></li></ul><h1 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h1><ul><li>抽象队列同步器     很多并发工具都是基于AQS实现的,ReentrantLock </li><li>维护了⼀个信号量state 和    由线程组成的双向链表    queue </li><li>线程队列，就是⽤来给线程排队的，  ⽽state就像是⼀个红绿灯，⽤来控制线程排队或者放⾏</li><li>比如ReentrantLock 中  state就⽤来表示加锁的次数</li></ul><h1 id="ThreadLocalMap-的key和value"><a href="#ThreadLocalMap-的key和value" class="headerlink" title="ThreadLocalMap  的key和value"></a>ThreadLocalMap  的key和value</h1><p>ThreadLocal的  get方法    里</p><ul><li>获得当前线程的map   再 getEntry  .value</li><li>entry 的key 是threadLocal对象的弱引用,, value是Object</li></ul><h1 id="锁升级过程"><a href="#锁升级过程" class="headerlink" title="锁升级过程"></a>锁升级过程</h1><p>  无锁、偏向锁、轻量级锁和重量级锁</p><ol><li>偏向锁:  往往 <strong>同一线程</strong>多次获得   为了避免重复加锁 , 再次访问直接获得锁</li><li>轻量级锁  通过CAS和自旋  避免线程 切换</li></ol><h1 id="实现多线程方式"><a href="#实现多线程方式" class="headerlink" title="实现多线程方式"></a>实现多线程方式</h1><ul><li>1.继承Thread  ,重写run()</li><li>实现Runnable接口 ,重写run()\</li><li>实现Callable,重写call() 有一个返回值</li><li>通过线程池创建线程, 使用线程池接口ExecutorService</li></ul><h1 id="线程生命周期-状态"><a href="#线程生命周期-状态" class="headerlink" title="线程生命周期(状态)"></a>线程生命周期(状态)</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.State  6个枚举值</span><br></pre></td></tr></table></figure><p>new<br>runable(ready 和running)<br>阻塞 </p><p>等待  超时等待<br>终止</p><h1 id="Thread-sleep-与Object-wait"><a href="#Thread-sleep-与Object-wait" class="headerlink" title="Thread.sleep   与Object.wait"></a>Thread.sleep   与Object.wait</h1><p>从哪里来     抱着锁睡      睡着状态     唤醒</p><ul><li><p>sleep休眠时不会主动释放锁 即不释放资源也就是抱着睡觉      wait休眠释放锁</p></li><li><p>sleep会进入TIME_WAITING  状态     wait  会进入 WAITING状态</p></li><li><p>sleep到时间自动<strong>唤醒</strong>,   wait必须等待其他线程调用notify唤醒某个在该对象上等待的线程或者notifyAll才会唤醒</p></li></ul><h1 id="线程阻塞原因"><a href="#线程阻塞原因" class="headerlink" title="线程阻塞原因?"></a>线程阻塞原因?</h1><ul><li>sleep  </li><li>suspend   resume</li><li>yield</li><li>wait</li></ul><h1 id="线程池参数"><a href="#线程池参数" class="headerlink" title="线程池参数"></a>线程池参数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 提前准备  和重复利用</span></span><br><span class="line"><span class="comment">         * 控制最大并发数</span></span><br><span class="line"><span class="comment">         * 控制任务最大数  拒绝策略</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 复用线程  降低资源消耗</span></span><br><span class="line"><span class="comment">         * 提高响应速度</span></span><br><span class="line"><span class="comment">         * 可以管理线程数和任务数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"><span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">        <span class="number">2</span>,<span class="comment">//核心线程数, 一般是CPU核心数 +1或者*2 ,根据是否是CPU密集型任务决定</span></span><br><span class="line"></span><br><span class="line">        <span class="number">3</span>,<span class="comment">//最大线程数</span></span><br><span class="line">        <span class="number">0</span>,<span class="comment">//救急线程的生存时间 </span></span><br><span class="line">        TimeUnit.MILLISECONDS, <span class="comment">//救急线程的生存时间</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">2</span>),  <span class="comment">//阻塞队列</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;  <span class="comment">//线程工厂.方便创建线程起个好名字</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r, <span class="string">&quot;myThread&quot;</span> + atomicInteger.getAndIncrement());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">       <span class="keyword">new</span>  <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy() <span class="comment">//拒绝策略  abort抛异常    交给调用者处理 直接丢弃  丢弃最旧</span></span><br><span class="line">);</span><br><span class="line">threadPool.submit(()-&gt; Thread.sleep(<span class="number">1000</span>));</span><br></pre></td></tr></table></figure><h1 id="线程池-执行-与提交区别"><a href="#线程池-执行-与提交区别" class="headerlink" title="线程池  执行 与提交区别"></a>线程池  执行 与提交区别</h1><ul><li>执行  一个runnable类型      提交 可以runnable 也可以 callable 返回一个future</li><li>执行碰到异常直接抛出        提交   的话   future.get才会抛出异常</li></ul><h1 id="禁止使用Executor创建线程池"><a href="#禁止使用Executor创建线程池" class="headerlink" title="禁止使用Executor创建线程池?"></a>禁止使用Executor创建线程池?</h1><ul><li><p>定长  和单个 线程池   阻塞队列 长度为  int.maxvalue</p></li><li><p>缓存与调度线程池   最大线程数为  maxvalue  请求太大都会oom</p></li></ul><h1 id="JVM主要组成部分"><a href="#JVM主要组成部分" class="headerlink" title="JVM主要组成部分"></a>JVM主要组成部分</h1><ul><li>类加载器（ClassLoader）</li><li>运行时数据区（Runtime Data Area）</li><li>执行引擎（Execution Engine）</li><li>本地库接口（Native Interface）</li></ul><h1 id="java内存模型"><a href="#java内存模型" class="headerlink" title="java内存模型"></a>java内存模型</h1><ul><li>屏蔽硬件和操作系统内存访问差异</li></ul><h1 id="CountDownLatch-x2F-CyclicBarrier-Semaphore-x2F"><a href="#CountDownLatch-x2F-CyclicBarrier-Semaphore-x2F" class="headerlink" title="CountDownLatch&#x2F;CyclicBarrier   Semaphore&#x2F;"></a>CountDownLatch&#x2F;CyclicBarrier   Semaphore&#x2F;</h1><ul><li>CountDownLatch   我必须等待     其他线程 走完了                会阻塞主线程</li><li>CyclicBarrier        先来的等等,   等所有人都到了,一起开会      阻塞的是子线程    另外他的计数器是可以reset的</li><li>Semaphore  多个人抢停车位</li></ul><h2 id="129-synchronized的优化升级"><a href="#129-synchronized的优化升级" class="headerlink" title="129. synchronized的优化升级"></a>129. synchronized的优化升级</h2><p>无锁、偏向锁、轻量级锁和重量级锁</p><ol><li>偏向锁:  往往 <strong>同一线程</strong>多次获得   为了避免重复加锁 , 再次访问直接获得锁</li><li>轻量级锁  通过CAS和自旋  避免线程 切换</li></ol><h2 id="131-如何在两个线程间共享数据"><a href="#131-如何在两个线程间共享数据" class="headerlink" title="131. 如何在两个线程间共享数据 ?"></a>131. 如何在两个线程间共享数据 ?</h2><p>通过在线程之间共享对象就可以了，然后通过wait&#x2F;notify&#x2F;notifyAll、await&#x2F;signal&#x2F;signalAll进行唤起和等待，比方说阻塞队列BlockingQueue就是为线程之间共享数据而设计的</p><h2 id="136-写一个生产者-消费者"><a href="#136-写一个生产者-消费者" class="headerlink" title="136. 写一个生产者-消费者"></a>136. 写一个生产者-消费者</h2><p>在两个线程里  无限 循环这三步   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">blockingQueue.put(&quot;a&quot;);  //1.put</span><br><span class="line">System.out.println(&quot;p&quot;);    //2.打印</span><br><span class="line">Thread.sleep(1000);    //3.休眠</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;结合实际聊聊JVM调优&quot;&gt;&lt;a href=&quot;#结合实际聊聊JVM调优&quot; class=&quot;headerlink&quot; title=&quot;结合实际聊聊JVM调优&quot;&gt;&lt;/a&gt;结合实际聊聊JVM调优&lt;/h1&gt;&lt;h1 id=&quot;lock-与sync区别&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="面试" scheme="https://pavaneyu.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>数据库面试题</title>
    <link href="https://pavaneyu.github.io/2022/02/23/%E9%9D%A2%E8%AF%95/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://pavaneyu.github.io/2022/02/23/%E9%9D%A2%E8%AF%95/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-02-23T05:35:25.354Z</published>
    <updated>2022-06-26T12:18:49.019Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="事务ACID靠什么保证-直接回答ACID-undolog-redolog-还有MVCC"><a href="#事务ACID靠什么保证-直接回答ACID-undolog-redolog-还有MVCC" class="headerlink" title="事务ACID靠什么保证    (直接回答ACID +undolog  redolog  还有MVCC )"></a>事务ACID靠什么保证    (直接回答ACID +undolog  redolog  还有MVCC )</h2><ul><li>A原子性:undolog日志保证,事务回滚时撤销已经执行的Sql</li><li>C一致性 由其他特性保证</li><li>I’隔离性 由MVCC保证,也就是多版本并发控制,读写时不阻塞</li><li>D持久性  redolog日志   如果数据没有保存成功,还可以中日志中再次执行sql</li></ul><h2 id="事务七种传播行为"><a href="#事务七种传播行为" class="headerlink" title="事务七种传播行为"></a>事务七种传播行为</h2><ul><li>需要 required     默认传播机制    有就加入 没有新建</li><li>需要新的  required_new              必须新建,旧的挂起</li><li>支持  support          有就加入 没有算了  </li><li>不支持  notSupport   不应该运行在事务中  ,有就挂起</li><li>强制 mandatory       必须运行在事务中,没有就抛出异常</li><li>从不  never                不应该运行在事务中,有就抛出异常</li><li>嵌套  nested            嵌套运行</li></ul><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><ul><li>读取未提交内容  –产生<strong>脏读</strong>  幻读  不可重复读 很少用</li><li>读取已提交内容 –         不可重复读  </li><li>可重复读  -默认隔离级别 ,可能产生<strong>幻读</strong>  InnoDB引擎通过多版本并发控制来解决幻读问题</li><li>串行化–最高级别的   读写  都加锁</li></ul><h2 id="事务三种隔离问题"><a href="#事务三种隔离问题" class="headerlink" title="事务三种隔离问题"></a>事务三种隔离问题</h2><ul><li>脏读   读取另一个事务未提交的数据</li><li>幻读    两次读取前后 结果集 不一致   可能变大 可能变小  </li><li>不可重复读   两次读取前后,数据内容不一致</li></ul><h1 id="mysql主从同步相关"><a href="#mysql主从同步相关" class="headerlink" title="mysql主从同步相关"></a>mysql主从同步相关</h1><h2 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h2><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ul><li>读写分离</li><li>数据热备份</li><li>降低IO频率</li></ul><h2 id="主从同步延迟-解决"><a href="#主从同步延迟-解决" class="headerlink" title="主从同步延迟?解决?"></a>主从同步延迟?解决?</h2><ul><li>业务代码里    写之后的读  指定主 数据库 来做    避免主从来没来得及同步 </li><li>二次读取</li><li>关键业务的读写 全 交给主服务器</li></ul><h1 id="sql调优"><a href="#sql调优" class="headerlink" title="sql调优"></a>sql调优</h1><h2 id="慢查询怎么处理"><a href="#慢查询怎么处理" class="headerlink" title="慢查询怎么处理"></a>慢查询怎么处理</h2><ul><li>​    分析<strong>sql语句</strong>优化   </li><li>可能查询条件<strong>没有命中索引</strong>, 分析执行计划  修改或者增加索引</li><li>数据库自身优化        <strong>表自身的数据量</strong>太大,可以考虑横向或纵向分表</li></ul><h2 id="慢-SQL优化"><a href="#慢-SQL优化" class="headerlink" title="(慢)SQL优化"></a>(慢)SQL优化</h2><ul><li><p>避免索引失效的场景     全表扫描        <strong>where</strong>  (xxx)  <strong>like</strong> (xxx)  <strong>or</strong> (x) <strong>in</strong> (xxx)</p><ul><li>where等号左边如果出现表达式和函数 也会全表扫描   </li><li>like  避免字段开头模糊查询  </li><li>低版本的or 也会 全表扫描   可以用union代替</li><li>in 会全表扫描    可以用between  或者exist代替</li></ul></li><li><p>索引优化  (查的更快,占用更少</p><ul><li>经常 查询   的字段 建立索引</li><li>过长字段  使用前缀索引</li><li>索引数目不要太多,</li></ul></li><li><p>查询优化     <strong>select</strong>  *  from x  <strong>join</strong> x   <strong>having</strong> xxx   <strong>limit</strong> 10</p><ul><li>避免select *,尽量指定字段</li><li>多表关联时,小表在前,大表在后   避免join太多表</li><li>用where替换having </li><li>查询数据量大,采用分页</li></ul></li><li><p>DML优化</p><ul><li>批处理,效率高一些</li><li>适当commit ,减少事务占用的资源’</li></ul><h2 id="查询sql执行顺序-1-构建虚拟表-2-条件过滤-3-调整顺序-4-返回"><a href="#查询sql执行顺序-1-构建虚拟表-2-条件过滤-3-调整顺序-4-返回" class="headerlink" title="查询sql执行顺序     (1.构建虚拟表   2.条件过滤  3.调整顺序  4.返回)"></a>查询sql执行顺序     (1.构建虚拟表   2.条件过滤  3.调整顺序  4.返回)</h2></li><li><p>from  join   on</p></li><li><p>where</p></li><li><p>order by    group by</p></li><li><p>select distinct  加上最后的 limit  返回</p></li></ul><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="索引原理"><a href="#索引原理" class="headerlink" title="索引原理"></a>索引原理</h2><ul><li>如果没有索引,查询就要遍历整张表  </li><li>添加索引  mysql 生成索引文件   查找时候就去索引文件找,再映射到对应的数据    类似于 先查一本书的目录</li><li>​                                                        首先给索引列  排序    然后生成倒排表      拼上数据地址链</li></ul><h2 id="聚集索引和非聚集索引"><a href="#聚集索引和非聚集索引" class="headerlink" title="聚集索引和非聚集索引"></a>聚集索引和非聚集索引</h2><p>都是一种B+树  </p><ul><li><p>聚集索引:    行数据   逻辑顺序    磁盘物理顺序  相同    ,一张表只有一个</p></li><li><p>非聚集索引:                逻辑顺序    磁盘物理顺序  不同   ,一张表可以有多个</p></li></ul><h2 id="创建索引原则"><a href="#创建索引原则" class="headerlink" title="创建索引原则"></a>创建索引原则</h2><ul><li><p>频繁查询的字段建立索引</p></li><li><p>过长的字段，使用前缀索引</p></li><li><p>索引个数适量,因为索引也要占空间  更新的时候也要维护</p></li><li></li><li></li><li><p>重复值较多的字段不适合建索引 ,比如 性别男女</p></li><li><p>经常更改的字段不适合建索引   比如 updatetime</p><h3 id><a href="#" class="headerlink" title></a></h3><h2 id="有哪几种索引类型"><a href="#有哪几种索引类型" class="headerlink" title="有哪几种索引类型"></a>有哪几种索引类型</h2></li><li><p>主键索引  id字段</p></li><li><p>唯一索引     用户名</p></li><li><p>普通索引</p></li><li><p>联合索引</p></li></ul><h2 id="索引下推-mysql-server-将判断条件-下推给-存储引擎"><a href="#索引下推-mysql-server-将判断条件-下推给-存储引擎" class="headerlink" title="索引下推  mysql server 将判断条件 下推给 存储引擎"></a>索引下推  mysql server 将判断条件 下推给 存储引擎</h2><ul><li>在联合索引情况下,  有这样一个条件  where name like 张% and age&#x3D;20</li><li>根据最左匹配原则    引擎层先找到匹配名字的数据  再由 server层过滤age&#x3D;20    </li><li>回表了两次 ,浪费了联合索引的后一个字段</li></ul><h2 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h2><p>提供索引最左边的字段,也就是排在最前面的字段</p><p>比如在建立abc三个字段的联合索引时,底层b+树按照从左到右比较大小排序</p><h2 id="回表-覆盖索引了解吗"><a href="#回表-覆盖索引了解吗" class="headerlink" title="回表   覆盖索引了解吗"></a>回表   覆盖索引了解吗</h2><p>通过非主键索引查询    会回表                比如select * from user where name &#x3D; ‘张三</p><p>先通过辅助索引  找主键</p><p>然后在主键索引  找数据</p><p>select name  from user where name &#x3D; ‘张三</p><p>这种就是覆盖索引</p><h1 id="分库分表相关"><a href="#分库分表相关" class="headerlink" title="分库分表相关"></a>分库分表相关</h1><h2 id="怎么分"><a href="#怎么分" class="headerlink" title="怎么分"></a>怎么分</h2><ul><li>水平拆分  按照每一行的数据进行拆分   没有交集  提高sql执行效率</li><li>垂直拆分   按每一列字段进行拆分  至少有一列交集</li></ul><h2 id="水平分表-的路由方式"><a href="#水平分表-的路由方式" class="headerlink" title="水平分表 的路由方式"></a>水平分表 的路由方式</h2><ul><li>范围路由</li><li>哈希路由</li><li>配置路由</li></ul><h2 id="分库分表中间件"><a href="#分库分表中间件" class="headerlink" title="分库分表中间件"></a>分库分表中间件</h2><p>Mycat 或者  harding-jdbc</p><h2 id="分库分表会带来什么问题"><a href="#分库分表会带来什么问题" class="headerlink" title="分库分表会带来什么问题"></a>分库分表会带来什么问题</h2><ul><li>分库       必须用分布式事务      夸库连表查询</li><li>分表     ID问题   UUID或者分布式ID(雪花算法)</li></ul><h1 id="mybatis相关"><a href="#mybatis相关" class="headerlink" title="mybatis相关"></a>mybatis相关</h1><h2 id="mybatis-优缺点"><a href="#mybatis-优缺点" class="headerlink" title="mybatis 优缺点"></a>mybatis 优缺点</h2><ul><li>sql 写在xml     与程序代码 解耦      支持动态sql</li><li>基于jdbc 所以 jdbc支持的数据库  mybatis都支持   但是 相比于 直接用 jdbc   减少很多冗余代码  </li><li>很容易与Spring集成</li><li></li><li>手动写sql  编写量大   而且具体的sql 依赖于 数据库 ,所以写好了之后不能随便更换</li></ul><h2 id="与"><a href="#与" class="headerlink" title="#{}与${}"></a>#{}与${}</h2><ul><li>#{}  会预编译处理 ,相当于prepareStatement.set 赋值,可以防止sql注入</li><li>${}  只是字符串替换</li></ul><h2 id="sql-模糊查询"><a href="#sql-模糊查询" class="headerlink" title="sql 模糊查询"></a>sql 模糊查询</h2><p>concat函数  (‘%’,#{},’%’)</p><h2 id="如何给sql-传参数"><a href="#如何给sql-传参数" class="headerlink" title="如何给sql 传参数"></a>如何给sql 传参数</h2><ol><li>@param 参数列表     2.map传     3.javaBean 传</li></ol><h2 id="动态sql-标签"><a href="#动态sql-标签" class="headerlink" title="动态sql 标签"></a>动态sql 标签</h2><ul><li>choose   when      选择一个</li><li>where  if    查询条件动态</li><li>set  if   更新条件动态</li><li>foreach    遍历集合</li></ul><h2 id="获取自动生成的主键-回填到实体类"><a href="#获取自动生成的主键-回填到实体类" class="headerlink" title="获取自动生成的主键  (回填到实体类)?"></a>获取自动生成的主键  (回填到实体类)?</h2><p>useGeneratedKeys&#x3D;”true” <strong>keyProperty</strong>&#x3D;”ID”  </p><p>java 完成插入后  可以自动获取 .getID</p><h2 id="mybatis-数据库字段-跟pojo中字段不一样怎么映射"><a href="#mybatis-数据库字段-跟pojo中字段不一样怎么映射" class="headerlink" title="mybatis 数据库字段  跟pojo中字段不一样怎么映射"></a>mybatis 数据库字段  跟pojo中字段不一样怎么映射</h2><ul><li><p>sql语句中起别名 ,跟pojo对应 </p></li><li><p>.resultmap 映射</p></li><li><p>如果只是驼峰和下划线的差别    mybatis配置文件中驼峰映射</p></li></ul><h2 id="嵌套查询与嵌套结果"><a href="#嵌套查询与嵌套结果" class="headerlink" title="嵌套查询与嵌套结果"></a>嵌套查询与嵌套结果</h2><p>嵌套查询是在查询 SQL 后再进行一个（子）查询  ,会执行多条Sql </p><p>嵌套结果是一个多表查询的 SQL 语句 ,执行一条复杂sql</p><h2 id="一对一-多对多"><a href="#一对一-多对多" class="headerlink" title="一对一  多对多"></a>一对一  多对多</h2><ol><li>联-association 用于一对一和多对一</li><li>集合-collection 用于一对多的关系</li></ol><h2 id="Mybatis三种Executor执行器"><a href="#Mybatis三种Executor执行器" class="headerlink" title="Mybatis三种Executor执行器:"></a>Mybatis三种Executor执行器:</h2><ul><li><p>简单执行器<strong>SimpleExecutor：</strong>每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。</p></li><li><p>重用执行器<strong>ReuseExecutor：</strong>执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用Statement对象。</p></li><li><p>批量执行器<strong>BatchExecutor：</strong>执行update。</p></li><li><p>Mybatis配置文件中，可以指定默认的ExecutorType执行器类型</p></li></ul><h2 id="mybatis-一二级缓存"><a href="#mybatis-一二级缓存" class="headerlink" title="mybatis  一二级缓存"></a>mybatis  一二级缓存</h2><ul><li>都是基于PerpetualCache ,HashMap存储</li><li>一级缓存 作用域为 session   ,也就是session结束会清空.他是默认开启</li><li>二级缓存 作用域为mapper ,可以在多个session之间共享, 他默认不开启</li></ul><h1 id="引擎与数据结构"><a href="#引擎与数据结构" class="headerlink" title="引擎与数据结构"></a>引擎与数据结构</h1><h2 id="InnoDB与Myisam"><a href="#InnoDB与Myisam" class="headerlink" title="InnoDB与Myisam ?"></a>InnoDB与Myisam ?</h2><ul><li>InnoDB             **行锁   支持事务          聚集索引   用的是b+树</li><li>Myisam             **表锁   不支持事务        非聚集索引     用的是b树</li></ul><h2 id="B树和B-Tree-区别"><a href="#B树和B-Tree-区别" class="headerlink" title="B树和B+Tree 区别"></a>B树和B+Tree 区别</h2><p>1.b+树 数据在叶子节点上</p><p>2.叶子节点  通过双向指针    形成了链表</p><p>3.全表扫描，只需要遍历叶子节点</p><h1 id="Sql调优之多个索引匹配"><a href="#Sql调优之多个索引匹配" class="headerlink" title="Sql调优之多个索引匹配?"></a>Sql调优之多个索引匹配?</h1><p>创建索引的时候</p><p>覆盖索引  减伤回表次数 支持索引下推</p><p>普通索引</p><h1 id="MySQL常用函数"><a href="#MySQL常用函数" class="headerlink" title="MySQL常用函数"></a>MySQL常用函数</h1><p>聚合函数   count   sum  max  min     avg</p><p>​       </p><h1 id="左连接-右链接-内连接和全外连接"><a href="#左连接-右链接-内连接和全外连接" class="headerlink" title="左连接  右链接   内连接和全外连接"></a>左连接  右链接   内连接和全外连接</h1><ul><li>left join （左连接）：以左边表所有记录为标准         右表中连接字段相等的记录 ,没有显示null<br>　　right join （右连接）：返回包括右表中的所有记录和左表中连接字段相等的记录。<br>  inner join （内连接）：只返回两个表中连接字段相等的行。</li><li>full join （全外连接）：返回左右表中所有的记录和左右表中连接字段相等的记录</li></ul><hr><h2 id="MySQL-数据库-cpu-飙升的话，要怎么处理呢？"><a href="#MySQL-数据库-cpu-飙升的话，要怎么处理呢？" class="headerlink" title="MySQL 数据库 cpu 飙升的话，要怎么处理呢？"></a>MySQL 数据库 cpu 飙升的话，要怎么处理呢？</h2><p>排查过程：</p><p>（1）使用 top 命令观察，确定是 mysqld 导致还是其他原因。</p><p>（2）如果是 mysqld 导致的，show processlist，查看 session 情况，确定是不是有消耗资源的 sql 在运行。</p><p>（3）找出消耗高的 sql，看看执行计划是否准确， 索引是否缺失，数据量是否太大。</p><p>处理：</p><p>（1）kill 掉这些线程 (同时观察 cpu 使用率是否下降)，</p><p>（2）进行相应的调整 (比如说加索引、改 sql、改内存参数)</p><p>（3）重新跑这些 SQL。</p><p>其他情况：</p><p>也有可能是每个 sql 消耗资源并不多，但是突然之间，有大量的 session 连进来导致 cpu 飙升，这种情况就需要跟应用一起来分析为何连接数会激增，再做出相应的调整，比如说限制连接数等</p><h1 id="mysql锁"><a href="#mysql锁" class="headerlink" title="mysql锁"></a>mysql锁</h1><ul><li>有好几种不同分类</li><li>可以分为  行锁  表锁  间隙锁  </li><li>共享锁  也就是读锁  只允许其他事务读,但不能写   排它锁  也就是写锁,其他事物不能读,也不能写</li><li>乐观锁,不是真的去锁,而是通过版本号来实现    悲观锁  行锁 表锁都是悲观锁</li></ul><h2 id="MySQL里记录货币用什么字段类型比较好？"><a href="#MySQL里记录货币用什么字段类型比较好？" class="headerlink" title="MySQL里记录货币用什么字段类型比较好？"></a>MySQL里记录货币用什么字段类型比较好？</h2><p>Decimal和Numric   用得字符串  来算    因为用浮点的话 会有误差</p><h2 id="DATETIME和TIMESTAMP的异同"><a href="#DATETIME和TIMESTAMP的异同" class="headerlink" title="DATETIME和TIMESTAMP的异同"></a>DATETIME和TIMESTAMP的异同</h2><ul><li>表现形式一致 </li><li>datetime 占 8个字节  从1000-9999年   与时区无关<ul><li>timestamp 4个字节    从1970-2038年   与时区关联</li></ul></li></ul><h1 id="mysql-日志-4-2"><a href="#mysql-日志-4-2" class="headerlink" title="mysql 日志  ?  4+2"></a>mysql 日志  ?  4+2</h1><ul><li>general log</li><li>error log</li><li>slow query log</li><li>bin log</li><li>innodb 的redo log 和undo log</li></ul><p><img src="/.io//image-20220626170132490.png" alt="image-20220626170132490"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h1&gt;&lt;h2 id=&quot;事务ACID靠什么保证-直接回答ACID-undolog-redolog-还有MVCC&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://pavaneyu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://pavaneyu.github.io/2022/02/22/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E7%8E%B0webflux/"/>
    <id>https://pavaneyu.github.io/2022/02/22/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E7%8E%B0webflux/</id>
    <published>2022-02-22T13:56:55.955Z</published>
    <updated>2022-06-24T12:25:14.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用函数式编程而非注解实现WebFlux-使用模拟数据"><a href="#用函数式编程而非注解实现WebFlux-使用模拟数据" class="headerlink" title="用函数式编程而非注解实现WebFlux(使用模拟数据)"></a>用函数式编程而非注解实现WebFlux(使用模拟数据)</h2><p>1.服务器绑定adapter,adapter绑定路由<br>2.路由绑定handler   ,通过Url类型  导航到 handler 具体方法 ,返回一个RouterFunction<ServerResponse><br>3.handler 绑定 一个service ,根据Url里面参数,用service获取一个Flux<br>再把Flux统一转成Mono<ServerResponse></ServerResponse></ServerResponse></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Server &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        new Server().createReactorServer();</span><br><span class="line">        System.out.println(&quot;enter to exit&quot;);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 路由 指明由地址栏解析的请求具体 去执行那个方法  bind handler  ,</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public RouterFunction&lt;ServerResponse&gt; routerFunction() &#123;</span><br><span class="line">        EmpHandler handler = new EmpHandler(new MyService());</span><br><span class="line"></span><br><span class="line">        return RouterFunctions.route(</span><br><span class="line">                RequestPredicates.GET(&quot;/emps/id=&#123;id&#125;&quot;).and(RequestPredicates.accept(MediaType.APPLICATION_JSON)),</span><br><span class="line">                handler::getEmpByID</span><br><span class="line">        ).andRoute(</span><br><span class="line">                RequestPredicates.GET(&quot;/emps&quot;).and(RequestPredicates.accept(MediaType.APPLICATION_JSON)),</span><br><span class="line">                handler::getAllEmps</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 适配器 binds with router</span><br><span class="line">     */</span><br><span class="line">    public void createReactorServer() &#123;</span><br><span class="line"></span><br><span class="line">        HttpHandler httpHandler = RouterFunctions.toHttpHandler(routerFunction());</span><br><span class="line">        ReactorHttpHandlerAdapter adapter = new ReactorHttpHandlerAdapter(httpHandler);</span><br><span class="line"></span><br><span class="line">        //server binds adapter</span><br><span class="line">        HttpServer.create().handle(adapter).bindNow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class EmpHandler &#123;</span><br><span class="line">    private final EmpService empService;  //handler binds with service</span><br><span class="line"></span><br><span class="line">    public EmpHandler(EmpService empService) &#123;//这里的形参是接口,传入要传入一个具体实现类</span><br><span class="line">        this.empService = empService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Mono&lt;ServerResponse&gt; getEmpByID(ServerRequest request) &#123;</span><br><span class="line">        int id = Integer.parseInt(request.pathVariable(&quot;id&quot;));</span><br><span class="line">        Mono&lt;Employee&gt; employeeMono = empService.getEmpByID(id);</span><br><span class="line">//        employeeMono.flatMap( employee -&gt; ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(employee,employee.getClass()))</span><br><span class="line">        return employeeMono.flatMap( employee -&gt; ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(fromObject(employee)))</span><br><span class="line">                .switchIfEmpty(ServerResponse.notFound().build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Mono&lt;ServerResponse&gt; getAllEmps(ServerRequest request) &#123;</span><br><span class="line">        Flux&lt;Employee&gt; allEmps = empService.getAllEmps();</span><br><span class="line">        return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(allEmps, Employee.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Mono&lt;ServerResponse&gt; addEmp(ServerRequest request) &#123;</span><br><span class="line">        Mono&lt;Employee&gt; employeeMono = request.bodyToMono(Employee.class);</span><br><span class="line">        return ServerResponse.ok().build(empService.addEmp(employeeMono));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Repository<br>public class MyService implements EmpService {</p><pre><code>private List&lt;Employee&gt; list = new ArrayList&lt;&gt;();&#123;    list.add(new Employee(1, &quot;a&quot;, &quot;A&quot;));    list.add(new Employee(2, &quot;b&quot;, &quot;B&quot;));    //list.add(new Employee(3, &quot;c&quot;, &quot;C&quot;));&#125;public List&lt;Employee&gt; getList() &#123;    return list;&#125;@Overridepublic Mono&lt;Employee&gt; getEmpByID(int id) &#123;    for (Employee employee : list) &#123;        if (employee.getId() == id) &#123;            return Mono.justOrEmpty(employee);        &#125;    &#125;    return null;&#125;@Overridepublic Flux&lt;Employee&gt; getAllEmps() &#123;    return Flux.fromIterable(list);&#125;@Overridepublic Mono&lt;Void&gt; addEmp(Mono&lt;Employee&gt; empMono) &#123;    return empMono.doOnNext(employee -&gt; list.add(employee)).thenEmpty(Mono.empty());&#125;</code></pre><p>&#96;&#96;&#96;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;用函数式编程而非注解实现WebFlux-使用模拟数据&quot;&gt;&lt;a href=&quot;#用函数式编程而非注解实现WebFlux-使用模拟数据&quot; class=&quot;headerlink&quot; title=&quot;用函数式编程而非注解实现WebFlux(使用模拟数据)&quot;&gt;&lt;/a&gt;用函数式编程而</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://pavaneyu.github.io/2022/02/22/SpringMVC%E7%AC%94%E8%AE%B0/"/>
    <id>https://pavaneyu.github.io/2022/02/22/SpringMVC%E7%AC%94%E8%AE%B0/</id>
    <published>2022-02-22T09:08:51.323Z</published>
    <updated>2022-02-22T12:23:15.349Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><p>[toc]</p><h1 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不打包进去,由执行服务器provide--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="web-xml-配置"><a href="#web-xml-配置" class="headerlink" title="web.xml  配置"></a>web.xml  配置</h1><p>1.注册编码过滤器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;UTF-8&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;forceResponseEncoding&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line"></span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;!--    为所有请求设置过滤器解决乱码问题--&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure><p>2.注册Servlet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;!--    spring config.xml--&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;classpath:MVCConfig.xml&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;!--    servlet  初始化提前到服务器启动时,而不是第一次收到请求--&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;!--      为所有servlet设置前端控制器(包含配置文件),里面有解析器和前后缀,编码格式等信息--&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><h1 id="java代码代替web-xml"><a href="#java代码代替web-xml" class="headerlink" title="java代码代替web.xml"></a>java代码代替web.xml</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 代替web.xml</span><br><span class="line"> * 2022-02-09 19:46</span><br><span class="line"> * @author ouyan</span><br><span class="line"> */</span><br><span class="line">public class WebInit extends AbstractAnnotationConfigDispatcherServletInitializer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        return new Class[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        return new Class[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected String[] getServletMappings() &#123;</span><br><span class="line">        return new String[]&#123;&quot;/&quot;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Filter[] getServletFilters() &#123;</span><br><span class="line">        return new Filter[]&#123;</span><br><span class="line">                new CharacterEncodingFilter(&quot;UTF-8&quot;,true),</span><br><span class="line">                new HiddenHttpMethodFilter()</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="MVCConfig-xml"><a href="#MVCConfig-xml" class="headerlink" title="MVCConfig.xml"></a>MVCConfig.xml</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    &lt;context:component-scan base-package=&quot;com.ouyang.demo1&quot;/&gt;</span><br><span class="line">    &lt;mvc:view-controller path=&quot;/&quot; view-name=&quot;index&quot;&gt;&lt;/mvc:view-controller&gt;</span><br><span class="line">    &lt;mvc:annotation-driven/&gt;</span><br><span class="line">&lt;!--    注解驱动--&gt;</span><br><span class="line">    &lt;mvc:default-servlet-handler/&gt;</span><br><span class="line">&lt;!--    servlet处理静态资源--&gt;</span><br><span class="line">    &lt;mvc:interceptors&gt;</span><br><span class="line">&lt;!--        &lt;bean class=&quot;com.ouyang.demo1.interceptor.MyIntercept&quot;/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;ref bean=&quot;myIntercept&quot;/&gt;    --&gt;</span><br><span class="line">        &lt;mvc:interceptor&gt;</span><br><span class="line">            &lt;mvc:mapping path=&quot;/*&quot;/&gt;</span><br><span class="line">            &lt;mvc:exclude-mapping path=&quot;/target&quot;/&gt;</span><br><span class="line">            &lt;ref bean=&quot;myIntercept&quot;/&gt;</span><br><span class="line">        &lt;/mvc:interceptor&gt;</span><br><span class="line">    &lt;/mvc:interceptors&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    视图分发器--&gt;</span><br><span class="line">    &lt;bean id=&quot;ViewResolver&quot; class=&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;order&quot; value=&quot;1&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;characterEncoding&quot; value=&quot;UTF-8&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;templateEngine&quot;&gt;</span><br><span class="line">            &lt;bean class=&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;templateResolver&quot;&gt;</span><br><span class="line">                    &lt;bean class=&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;&gt;</span><br><span class="line">                        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/templates/&quot;/&gt;</span><br><span class="line">                        &lt;property name=&quot;suffix&quot; value=&quot;.html&quot;&gt;&lt;/property&gt;</span><br><span class="line">                        &lt;property name=&quot;templateMode&quot; value=&quot;HTML5&quot;/&gt;</span><br><span class="line">                        &lt;property name=&quot;characterEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;</span><br><span class="line">                    &lt;/bean&gt;</span><br><span class="line">                &lt;/property&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h1 id="java代码代替MVCConfig-xml"><a href="#java代码代替MVCConfig-xml" class="headerlink" title="java代码代替MVCConfig.xml"></a>java代码代替MVCConfig.xml</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代替SpringMVC的配置文件</span></span><br><span class="line"><span class="comment"> * 2022-02-09 19:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ouyan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.ouyang.demo1&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">MyIntercept</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常解析器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resolvers</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureHandlerExceptionResolvers</span><span class="params">(List&lt;HandlerExceptionResolver&gt; resolvers)</span> &#123;</span><br><span class="line">        <span class="type">SimpleMappingExceptionResolver</span> <span class="variable">exceptionResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMappingExceptionResolver</span>();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;java.lang.ArithmeticException&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">        exceptionResolver.setExceptionMappings(properties);</span><br><span class="line">        exceptionResolver.setExceptionAttribute(<span class="string">&quot;exception&quot;</span>);</span><br><span class="line">        resolvers.add(exceptionResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传解析器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板解析器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ITemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(ContextLoader.getCurrentWebApplicationContext().getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板引擎</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateResolver 自动注入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">templateEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 视图解析器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateEngine 主动注入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Controller类的方法返回对应页面的String"><a href="#Controller类的方法返回对应页面的String" class="headerlink" title="Controller类的方法返回对应页面的String"></a>Controller类的方法返回对应页面的String</h1><h2 id="RequestMapping的参数"><a href="#RequestMapping的参数" class="headerlink" title="RequestMapping的参数"></a>RequestMapping的参数</h2><h2 id="方法的形参"><a href="#方法的形参" class="headerlink" title="方法的形参"></a>方法的形参</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //<span class="doctag">@RequestMapping</span>(&quot;/my&quot;)//类上加mapping 注解 表示里面的所有方法url都是类url的子目录</span></span><br><span class="line"><span class="comment"> * //例如     /my/target才能对应target文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     RequestMapping的参数</span></span><br><span class="line"><span class="comment">      1.value 可以有多个url的集合 都会map到这个方法 ,必要  value = &#123;&quot;/&quot;,&quot;//&quot;&#125;  失败返回404</span></span><br><span class="line"><span class="comment">        ?模糊匹配单个字符  * 模糊匹配n个字符  [/]**[/]模糊匹配n层目录</span></span><br><span class="line"><span class="comment">      2.method = &#123;RequestMethod.GET,RequestMethod.POST&#125; 也可以用派生注解@GetMapping  拒绝返回405</span></span><br><span class="line"><span class="comment">      3.params = &quot;name&quot;  表示url之后必须有?name=XX   也可以有多个必须要求的参数</span></span><br><span class="line"><span class="comment">        params = &quot;!name&quot;  表示后面不能有name   失败返回400</span></span><br><span class="line"><span class="comment">      4.headers = &quot;AA=BB&quot;   表示请求头里必须包含AA且值必须为BB,否则拒绝访问,并返回404</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;   <span class="comment">//根据url 返回 网 页文件名 ,之后会自动加上前缀和后缀找到文件地址</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/target&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">tar</span><span class="params">(</span></span><br><span class="line"><span class="params">            String user,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(value = &quot;passW&quot;, required = true, defaultValue = &quot;123456&quot;)</span> String psw,</span></span><br><span class="line"><span class="params">            //解析通过get或者post里面的参数,若形参名跟url里面不一样,要通过注解映射</span></span><br><span class="line"><span class="params">            //也可以required = <span class="literal">false</span>设为非必须, 如果传入<span class="literal">null</span>或<span class="string">&quot;&quot;</span>,设置默认值</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestHeader(&quot;Host&quot;)</span> String host, //获取请求头里面的Host信息,这个参数不是url里的</span></span><br><span class="line"><span class="params">            <span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String jasonID//获取请求头里面的JSESSIONID信息,这个不是参数url里的</span></span><br><span class="line"><span class="params">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="params">            如果参数列表是entity的字段,形参甚至可以写成 entity对象</span></span></span><br><span class="line"><span class="comment"><span class="params">             */</span></span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">        System.out.println(<span class="string">&quot;psw = &quot;</span> + psw);</span><br><span class="line">        System.out.println(<span class="string">&quot;host = &quot;</span> + host);</span><br><span class="line">        System.out.println(<span class="string">&quot;jasonID = &quot;</span> + jasonID);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/modelAndView&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;index&quot;</span>, <span class="string">&quot;model&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        <span class="comment">//在index.html中用 &lt;p th:text=&quot;$&#123;model&#125;&quot;&gt;&lt;/p&gt; 就可以得到传进来的 model值  //整个request都有效</span></span><br><span class="line">        <span class="comment">//index.addObject(&quot;a&quot;, &quot;b&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/session&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">session</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        <span class="comment">//在index.html中可以用$&#123;session.aaa&#125; 获取值  //整个session都有效</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;application&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">app</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">        session.getServletContext().setAttribute(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        <span class="comment">//在index.html中用$&#123;application.aaa&#125; 获取值 //整个项目应用都有效</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/transmit&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">transmit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/target&quot;</span>;</span><br><span class="line">        <span class="comment">//由服务器转发,委托其他页面处理,浏览器不需要重新请求,地址栏不变</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/redirect&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">redirect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/target&quot;</span>;</span><br><span class="line">        <span class="comment">//重定向,由浏览器重新请求,地址栏跳转</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/requestBody&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">requestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;requestBody = &quot;</span> + requestBody);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;index&quot;</span>, <span class="string">&quot;model&quot;</span>, requestBody);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;requestEntity&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">requestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;requestEntity.getHeaders() = &quot;</span> + requestEntity.getHeaders());</span><br><span class="line">        System.out.println(<span class="string">&quot;requestEntity.getBody() = &quot;</span> + requestEntity.getBody());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;index&quot;</span>, <span class="string">&quot;model&quot;</span>, requestEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;responseEntity&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">responseBody</span><span class="params">(ResponseEntity&lt;String&gt; responseEntity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;index&quot;</span>, <span class="string">&quot;model&quot;</span>, <span class="string">&quot;responseEntity.getHeaders().toString()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/response&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">response</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;response you!!!!! &quot;</span>;</span><br><span class="line">        <span class="comment">//返回响应体String ,也可以返回一个对象,解析成json返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="html中thymeleaf解析参数"><a href="#html中thymeleaf解析参数" class="headerlink" title="html中thymeleaf解析参数"></a>html中thymeleaf解析参数</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>nmsl<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/emps&#125;&quot;</span>&gt;</span> 所有员工信息  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--/*@thymesVar id=&quot;model&quot; type=&quot;Model&quot;*/--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;model&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>emps info<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>emps info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        一行四个th表头--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>resume<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>option<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/*@thymesVar id=&quot;emps&quot; type=&quot;List&quot;*/--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;emp:$&#123;emps&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--allEmps是model携带过来的map的keyName对应的value --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/*@thymesVar id=&quot;emp&quot; type=&quot;com.ouyang.demo1.entity.Employee&quot;*/--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.id&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.name&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.resume&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;@&#123;/emps/&#125;+$&#123;emp.id&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;@&#123;&#x27;/emps/&#x27;+$&#123;emp.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>save<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        一行四个th元素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;maven依赖&quot;&gt;&lt;a href=&quot;#maven依赖&quot; class=&quot;headerlink&quot; title=&quot;maven依赖&quot;&gt;&lt;/a&gt;maven依赖&lt;/h1&gt;&lt;figure class=&quot;highlight xml&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>面试之Java语言</title>
    <link href="https://pavaneyu.github.io/2022/02/19/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95-java%E8%AF%AD%E8%A8%80/"/>
    <id>https://pavaneyu.github.io/2022/02/19/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95-java%E8%AF%AD%E8%A8%80/</id>
    <published>2022-02-19T06:02:27.542Z</published>
    <updated>2022-06-25T02:11:28.679Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-equals与-x3D-x3D"><a href="#1-equals与-x3D-x3D" class="headerlink" title="1.equals与&#x3D;&#x3D;"></a>1.equals与&#x3D;&#x3D;</h1><ul><li>&#x3D;&#x3D;比较地址,即比较是否为同一个对象     equals用来比较内容,object里默认用&#x3D;&#x3D;实现,往往需要重写</li></ul><h1 id="基本类型-字节数"><a href="#基本类型-字节数" class="headerlink" title="基本类型 字节数"></a>基本类型 字节数</h1><p>short   2</p><p>int      4</p><p>long   8</p><p>float    4</p><p>double  8</p><p>byte   1</p><p>char   2</p><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><ul><li><p>final  不可变   </p><ul><li>多线程安全 </li><li>实现字符串常量池   </li><li>不可变的话, 保证hashcode唯一 ,所以hashmap 的key 常用string</li><li>文件名  路径  url  都是用字符串存储  如果可变,造成安全问题</li></ul></li><li><p>有一个常量池 ,没有找到才会新建一个对象</p></li></ul><h1 id="什么是nio-与传统io区别"><a href="#什么是nio-与传统io区别" class="headerlink" title="什么是nio  与传统io区别"></a>什么是nio  与传统io区别</h1><p>bio  阻塞io  </p><p>nio   非阻塞IO   线程发起io请求后立即返回   直到cpu做好io准备     是多路复用的基础</p><p>aio   异步非阻塞io</p><h1 id="反射优缺点-哪里用到"><a href="#反射优缺点-哪里用到" class="headerlink" title="反射优缺点  哪里用到"></a>反射优缺点  哪里用到</h1><ul><li>动态加载类     增加灵活性  提高复用率</li><li>性能问题   </li><li>可以访问私有的属性和方法,存在内部暴露问题</li><li>sprig加载配置文件   jdbc 驱动类是通过反射加载的</li></ul><h1 id="面向对象特征"><a href="#面向对象特征" class="headerlink" title="面向对象特征"></a>面向对象特征</h1><p>1.封装   代码复用性</p><ol start="2"><li>继承代码复用性</li></ol><p>3.多态  可移植性,健壮性   变异类型  与运行类型不一样   </p><h1 id="泛型擦除"><a href="#泛型擦除" class="headerlink" title="泛型擦除"></a>泛型擦除</h1><ul><li><strong>泛型信息只存在于代码编译期，在进入 JVM 之前，与泛型相关的信息会被擦除掉</strong></li><li>为了防止过多创建不同的类,造成过度消耗</li></ul><h1 id="对象内存结构"><a href="#对象内存结构" class="headerlink" title="对象内存结构"></a>对象内存结构</h1><ul><li>对象头 包括  markword 和classPointer</li><li>实际数据</li><li>对齐填充</li></ul><h1 id="重写了equals-，还要重写hashCode-？"><a href="#重写了equals-，还要重写hashCode-？" class="headerlink" title="重写了equals()，还要重写hashCode()？"></a>重写了equals()，还要重写hashCode()？</h1><ul><li>hashcode()方法返回hash值  ,可以定位索引位置,提高查询效率</li><li>hash 有个特点,相同对象hash一定一样,不同对象hash值基本不一样</li><li>当发生hash collision  就要用equals判断两个对象内容是否相等</li><li>如果两个对象内容相同，地址不同 ,  equals为true的         但是hashCode比较是不相等的</li><li>这就矛盾了,违反了 equals 为 true ， hashCode 也要相等的原则</li></ul><p>往HashMap添加元素的时候，需要hashcode方法定位到在数组的位置</p><p>没有重写 hashCode 方法，两个对象equans为true   那么就无法定位到同一个位置，集合还是会插入元素</p><p>出现重复元素,重写的equals方法就没意义了</p><h1 id="3-Collecttions单列集合"><a href="#3-Collecttions单列集合" class="headerlink" title="3.Collecttions单列集合"></a>3.Collecttions单列集合</h1><ul><li>List,线程不安全,有序,可以重复<ul><li>arrylist 底层由数组实现,根据下标来索引,所以查询效率高,增删效率低</li><li>扩容:默认容量0,第一次添加扩到10,此后1.5倍扩容  指定容量时,1.5扩容  <ul><li>LinkedList 底层是双向链表,增删效率高,查询效率低</li></ul></li></ul></li></ul><ul><li><p>Set,HashSet   无序,不可以重复</p><ul><li><p><em>hashset</em>底层是hashmap ,而hashmap底层是数组+链表+红黑树</p><p>​                                                                                        </p></li><li><p>添加一对key  value的话 </p><p>1.得到  key  hash值, 再转成索引值    (key—hashcode–二次hash–余容量-1—–按位余—-索引值(桶下标))</p></li><li><p>2.查table    没有就添加(创建Node并返回)      有就比较valueObject       </p></li><li><p>3.相同就覆盖原来的valueObject         不同   判断链表高度插入链表   </p></li><li><p>插入链表时候   1,7是头插法   1.8是尾插法 </p><p>​                                                                                              </p></li><li><p>底层hashmap的扩容:</p><ul><li>第一次扩到16,到临界值后双倍扩容,</li><li>临界值为当前容量*加载因子,默认0.75</li><li>如果链表高度超过8,且数组长度大于64,转成红黑树</li></ul></li></ul><h1 id="加载因子0-75"><a href="#加载因子0-75" class="headerlink" title="加载因子0.75?"></a>加载因子0.75?</h1><ul><li>在空间占用 与查询时间  取一个平衡</li><li>如果快满了才扩容,链表就会比较长 影响查询时间</li><li>如果才一半就去扩容 ,那么扩容就会频繁 ,占用空间变多</li></ul></li></ul><h1 id="如何线程安全地使用hashmap"><a href="#如何线程安全地使用hashmap" class="headerlink" title="如何线程安全地使用hashmap"></a>如何线程安全地使用hashmap</h1><ul><li><p>直接加锁使用   Collections.synchronizedMap(hashMap)  </p></li><li><p>使用ConcurrentHashMap </p><h1 id="ConcurrentHashMap-的实现"><a href="#ConcurrentHashMap-的实现" class="headerlink" title="ConcurrentHashMap 的实现"></a>ConcurrentHashMap 的实现</h1><ul><li><p>jdk 1.7 中，由 Segment 数组和 HashEntry 数组结构构成。采取分段锁来保证安全性。</p></li><li><p>jdk1.8之后使用 Node 数组+链表+红黑树    并发控制使用 Synchronized 和 CAS 实现</p></li></ul></li></ul><h1 id="集合类的线程安全问题"><a href="#集合类的线程安全问题" class="headerlink" title="集合类的线程安全问题"></a>集合类的线程安全问题</h1><ul><li><p>第一代  考虑到了线程安全<br>vector hashtable<br> 方法全部sync  效率较低</p></li><li><p>第二代非线程安全<br>ArrayList  HashMap  但是效率高<br>要线程安全使用可以用Collecttions的静态方法 sync</p></li><li><p>第三代并发包下的线程安全集合<br>ConcurrentHashMap  CopyOnWriteArrayList</p></li></ul><h1 id="JDK1-8新特性"><a href="#JDK1-8新特性" class="headerlink" title="JDK1.8新特性"></a>JDK1.8新特性</h1><ul><li>接口默认方法</li><li>lambla表达式简化匿名内部类    本质是一个函数式接口     就是只有一个方法的接口,描述了方法的特征  比如Comsumer  Function  当然如果某个方法满足特征,可以直接方法引用</li><li>Stream流   </li><li>新日期API optional 类</li></ul><h1 id="双列集合map"><a href="#双列集合map" class="headerlink" title="双列集合map"></a>双列集合map</h1><ul><li><p>hashmap继承自AbstractMap</p><ul><li>线程不安全,允许空值,底层是数组+链表+红黑树</li><li>默认大小16,到临界值  ,2倍扩容</li></ul></li><li><p>concurrentHashMap   线程安全</p></li><li><p>hashtable  继承自Dctionary     </p><ul><li>线程安全  不允许有空值</li><li>全局锁  所以效率不高</li><li>默认大小11,到临界值扩容,2n+1</li></ul></li></ul><h1 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h1><p>1.构造器私有化</p><p>2.私有静态volatile 成员对象</p><p>3.双重检查,在第一次判空之后使用同步锁,保证线程安全</p><p>4.也可以静态内部类来实现 </p><p>5.枚举类也是一种单例模式</p><h1 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h1><ul><li><p>抽象类必须至少有一个抽象方法,子类必须重写所有抽象方法</p><ul><li>接口中方法默认抽象方法, 接口实现类必须重写抽象方法方法</li></ul><p>default可以有默认实现  </p></li><li><p>因为单继承,但是可以实现多个接口</p></li><li><p>抽象类 用来描述实体<strong>本质概念</strong>,比如猫科动物,</p></li><li><p>接口用来描述<strong>操作特征</strong>,比如会飞,那么实现接口的都有一个飞的方法,鸟会飞,飞机也会飞</p></li></ul><h1 id="int和Integer"><a href="#int和Integer" class="headerlink" title="int和Integer"></a>int和Integer</h1><p>类型    -&gt; 比较  -&gt;  缓存           使用  (定义时候初始 |使用地方)</p><ul><li>int是基本类型, 存在栈上        Integer是包装类型,是面向对象的,存在堆里</li><li>int 比较内容用&#x3D;&#x3D;   Integer比较内容用equals</li><li>Integer  在自动装箱的时候      在-128到127内有缓存, 在这中间不新建对象   </li><li>未初始化 int默认为0,Integer 默认为null</li><li>临时使用时用int, 分配在栈上   定义pojo时用Integer,保证序列化</li></ul><h1 id="String，StringBuffer，StringBuilder的区别"><a href="#String，StringBuffer，StringBuilder的区别" class="headerlink" title="String，StringBuffer，StringBuilder的区别"></a>String，StringBuffer，StringBuilder的区别</h1><p>可变   线程安全  效率   场景</p><ul><li>String          不可变  每次更改都会创建新的String     适合操作少量数据     另外两个是可变的</li><li>StringBuffer   线程安全       多线程操作大量数据</li><li>StringBuilder  虽然线程不安全  效率最高       只适合单线程操作大量数据</li></ul><h1 id="浅拷贝-深拷贝"><a href="#浅拷贝-深拷贝" class="headerlink" title="浅拷贝  深拷贝"></a>浅拷贝  深拷贝</h1><ul><li><p>浅拷贝 属性地址是一样的</p></li><li><p>如果改变a的属性,那么b的属性也会跟着变</p></li><li><p>深拷贝就不会出现这种问题 ,可以继承cloneable接口,在重写的clone方法里面把属性进行复制</p></li><li><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1></li><li><p>@interface</p></li><li><p>四个元注解属性   </p><ul><li>target  注解目标   </li><li>retention  注解生命周期   到源文件class文件还是到运行期</li><li>documented  注解时候生成带javadoc文档</li><li>inherited  是否被继承</li></ul></li></ul><h1 id="Class对象获取"><a href="#Class对象获取" class="headerlink" title="Class对象获取"></a>Class对象获取</h1><ul><li>类名.class</li><li>对象.getClass()</li><li>Class.forName()</li></ul><h1 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h1><ul><li><p>非法参数</p></li><li><p>类型转换   数组越界   并发修改 </p></li><li><pre><code>                            非法参数 uuid     空指针 obj=null     (类转换)     算数 下标      并发修改异常</code></pre></li></ul><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h1 id="mysql常用函数"><a href="#mysql常用函数" class="headerlink" title="mysql常用函数"></a>mysql常用函数</h1><h1 id="mysql引擎"><a href="#mysql引擎" class="headerlink" title="mysql引擎"></a>mysql引擎</h1><p>innodb  支持行锁 和表锁   默认隔离级别  可重复读</p><p>Mylsam  只支持表锁   不支持事务   </p><p><img src="https://s2.loli.net/2022/02/22/VmiCusMxhb4okPD.png" alt="image-20220222211908084"></p><h1 id="覆盖索引-索引下推"><a href="#覆盖索引-索引下推" class="headerlink" title="覆盖索引?索引下推?"></a>覆盖索引?索引下推?</h1><h1 id="redis-底层推送机制"><a href="#redis-底层推送机制" class="headerlink" title="redis  底层推送机制"></a>redis  底层推送机制</h1><p>redis事务不支持回滚</p><h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><h1 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手?"></a>TCP四次挥手?</h1><p><img src="https://s2.loli.net/2022/02/23/V8nGuJAQWgfo3ae.png" alt="image-20220223130336737"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-equals与-x3D-x3D&quot;&gt;&lt;a href=&quot;#1-equals与-x3D-x3D&quot; class=&quot;headerlink&quot; title=&quot;1.equals与&amp;#x3D;&amp;#x3D;&quot;&gt;&lt;/a&gt;1.equals与&amp;#x3D;&amp;#x</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://pavaneyu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>MQ消息队列</title>
    <link href="https://pavaneyu.github.io/2022/02/17/MQ%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>https://pavaneyu.github.io/2022/02/17/MQ%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</id>
    <published>2022-02-17T08:44:34.942Z</published>
    <updated>2022-02-20T07:44:55.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解耦-异步-削峰"><a href="#解耦-异步-削峰" class="headerlink" title="解耦 异步  削峰"></a>解耦 异步  削峰</h1><p><a href="https://www.bilibili.com/video/BV15Z4y1x7tE">视频</a></p><p>1.系统之间不产生依赖关系,增加和删除系统不会影响其他系统代码</p><img src="https://s2.loli.net/2022/02/16/Jt6UwFTRLhxqXfk.png" alt="image-20220216202439238" style="zoom:80%;"><p>2.不需要请求者等待,等结果处理完再返回结果</p><img src="https://s2.loli.net/2022/02/16/BTZgFlOz7VSvXj4.png" alt="image-20220216211043584" style="zoom:80%;"><p>3.流量缓冲</p><p><img src="https://s2.loli.net/2022/02/16/ZVw8BJiGtIhqaWn.png" alt="image-20220216211135531"></p><p>缺点,  系统复杂度提高   重复消费问题?  消息丢失?消息顺序?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解耦-异步-削峰&quot;&gt;&lt;a href=&quot;#解耦-异步-削峰&quot; class=&quot;headerlink&quot; title=&quot;解耦 异步  削峰&quot;&gt;&lt;/a&gt;解耦 异步  削峰&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV15</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://pavaneyu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis笔记</title>
    <link href="https://pavaneyu.github.io/2022/02/17/redis%E7%AC%94%E8%AE%B0/"/>
    <id>https://pavaneyu.github.io/2022/02/17/redis%E7%AC%94%E8%AE%B0/</id>
    <published>2022-02-17T08:28:50.667Z</published>
    <updated>2022-07-05T12:33:34.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h1><ol><li><p>Redis 为什么快？</p><p>+ </p></li><li><p>Redis 有哪些常用的数据结构？</p><p>字符串类型：String</p><p>哈希类型：Hash</p><p>列表类型：List</p><p>集合类型：Set</p><p>有序集合类型zset</p><p>高级结构，HyperLogLog  <strong>基数统计</strong>、Geo <strong>地理位置</strong>、<strong>BloomFilter</strong>  <strong>布隆过滤</strong></p></li><li><p>Redis RDB 和 AOF 持久化的区别，如何选择？</p></li><li><p>如何解决缓存击穿、缓存穿透、雪崩问题？</p></li><li><p>如何用 Redis 实现点赞功能，怎么设计 Key &#x2F; Value？</p></li></ol><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li>基于内存，读写快，单机Redis能处理10W+的请求</li><li>单线程，避免上下文切换的时间消耗</li><li>非阻塞的多路复用IO</li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>- </p><ol><li>String ,二进制安全,即可以包含任何序列化的对象,比如图片</li></ol><p>最大512M</p><p>简单动态字符串  类似ArrayList ,采用预分配冗余空间方式减少内存频繁分配</p><p>redis任何操作都是原子操作,即不会被其他线程打断</p><p>​    2.List :单键多值   底层是双向链表</p><ol start="3"><li><p>set:去重,无序    底层是hash表,所以CRUD的复杂度是O(1)</p></li><li><p>Hash:</p></li></ol><p>​    5.有序集合zset</p><p><img src="https://s2.loli.net/2022/02/18/wDro6MlgPOAa4KX.png"></p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>redis中事务不保证原子性,所以要手动回滚</p><p><img src="https://s2.loli.net/2022/02/18/qFoQg5v6bntLpXr.png" alt="image-20220218145201511"></p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>单位GB大小写无所谓</p><p>导入其他文件</p><p>网络  bind ip注释掉  端口</p><p>通用 daemonize yes 以守护进程运行,默认no</p><p>持久化    save 60  100   在60s内进行100次key的修改,就持久化操作</p><p>密码</p><p>内存策略</p><h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><h2 id="RDB快照-默认-数据有遗失-但恢复快"><a href="#RDB快照-默认-数据有遗失-但恢复快" class="headerlink" title="RDB快照,默认  (数据有遗失,但恢复快)"></a>RDB快照,默认  (数据有遗失,但恢复快)</h2><p>1.满足自定义规则,执行flushall或者退出redis          会自动触发rdb</p><p>2.优点:适合大规模数据恢复,对数据完整性不高</p><p>3.缺点:操作需要时间间隔,最后一次修改的数据可能因为宕机而丢失</p><h2 id="AOF日志-数据全-但恢复慢-用来追加不全的数据"><a href="#AOF日志-数据全-但恢复慢-用来追加不全的数据" class="headerlink" title="AOF日志 (数据全,但恢复慢,用来追加不全的数据)"></a>AOF日志 (数据全,但恢复慢,用来追加不全的数据)</h2><p>1.每一次修改都同步,保证数据完整性</p><p>每秒同步一次,可能会丢失这一秒的数据</p><p>从不同步.效率最高</p><p>2.缺点,数据文件大,修复速度慢.运行效率低 </p><h1 id="键过期策略"><a href="#键过期策略" class="headerlink" title="键过期策略"></a>键过期策略</h1><p>  定时过期</p><p>惰性过期</p><p>Redis中同时使用了惰性过期和定期过期两种过期策略。</p><h1 id="内存淘汰策略-默认LRU-最近最少使用"><a href="#内存淘汰策略-默认LRU-最近最少使用" class="headerlink" title="内存淘汰策略 -默认LRU,最近最少使用"></a>内存淘汰策略 -默认LRU,最近最少使用</h1><h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><p>主以写为主,从以读为主,读写分离</p><p> 作用:数据冗余.故障恢复 ,负载均衡,是高可用的基石</p><p>一般单台redis服务器最大内存不超过20g</p><p>  环境配置:只配置从库</p><p>默认情况下,每台redis服务器都是主节点</p><p>全量复制 ,增量复制</p><h1 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h1><p>监控主机是否故障,如果故障根据投票数,自动替换为主机</p><p>如果原来主机恢复,只能当做从机</p><p>优点:基于主从复制的优点      主从可以切换,故障可以转移,提高系统可用性    </p><p>缺点:不好在线扩容,配置麻烦</p><h1 id="缓存穿透-查询空的对象"><a href="#缓存穿透-查询空的对象" class="headerlink" title="缓存穿透(查询空的对象)"></a>缓存穿透(查询空的对象)</h1><p>同时大量查询一个没有记录的对象,缓存没有只能去数据库查,数据库也没有结果,也不会在缓存中记录  ,所以每次这种请求就会直接到数据库</p><p><strong>1.布隆过滤器  如果没有的话,直接返回 连缓存都不用查</strong></p><p> 是一种数据结构,对所有可能查询的参数以hash形式存储,在控制层进行校验,不符合就丢弃,从而避免对数据库的查询压力</p><p>2**.缓存空值      配置文件 里cache-null-values&#x3D;true**</p><h1 id="缓存击穿-被频繁访问的一个key-在过期的时候导致"><a href="#缓存击穿-被频繁访问的一个key-在过期的时候导致" class="headerlink" title="缓存击穿(被频繁访问的一个key,在过期的时候导致)"></a>缓存击穿(被频繁访问的一个key,在过期的时候导致)</h1><p>一个key不停地在抗大并发,当key在过期的瞬间,大并发就会直接访问到数据库</p><p>1.设置热点数据永不过期</p><p><strong>2.加锁   ,保证每个key只能有一个线程去数据库查询   @Cacheable(cacheNames&#x3D;”menu”, sync&#x3D;”true”)</strong></p><h1 id="缓存雪崩-缓存一起失效"><a href="#缓存雪崩-缓存一起失效" class="headerlink" title="缓存雪崩 缓存一起失效"></a>缓存雪崩 缓存一起失效</h1><ul><li><strong>过期时间加随机值</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面试问题&quot;&gt;&lt;a href=&quot;#面试问题&quot; class=&quot;headerlink&quot; title=&quot;面试问题&quot;&gt;&lt;/a&gt;面试问题&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Redis 为什么快？&lt;/p&gt;
&lt;p&gt;+ &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Redis 有哪些常用的数据</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://pavaneyu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>回顾java基础之一(多态,接口,异常,常用类,集合)</title>
    <link href="https://pavaneyu.github.io/2022/02/16/%E5%9B%9E%E9%A1%BEjava%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%B8%80/"/>
    <id>https://pavaneyu.github.io/2022/02/16/%E5%9B%9E%E9%A1%BEjava%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%B8%80/</id>
    <published>2022-02-16T08:05:57.314Z</published>
    <updated>2022-02-16T08:25:08.632Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><ol start="5"><li>pubic  谁都可以<br>protected 同包和子类 可以访问<br>默认 同包可以访问<br>private  只有类内访问</li></ol><p>6.<strong>封装</strong>目的 隐藏实现细节  对数据进行验证安全 不然用户自己赋值,而是让\调用方法实现赋值</p><ul><li>实现 1.属性私有化,只能自己操作    2.对外提供只getset方法操作</li><li>在构造器中用set 可以防止通过 构造器直接赋值不安全数据</li></ul><p>7.直接打set 自动完成set方法</p><p>8.<strong>继承</strong>  实现代码复用  提高拓展性和可维护性放</p><ul><li><p>多个类存在相同属性和方法,可以抽象出父类</p></li><li><p>子类不能用父类的私有属性和方法,非私有的都能用</p></li><li><p><strong>子类构造器必须直接或间接调用父类构造器,完成对父类属性的初始化</strong>,分工明确<br> (间接调用:构造器中用this()调用其他参数的构造器,而后者调用super() ,同一构造器this()和super()不能同时用 )</p></li><li><p>默认自动隐式调用无参构造器,相当于自动super()</p></li><li><p>可以在第一行用super(参数)可以指定父类某一个构造器,如果父类没有无参构造器.则必须指定</p></li><li><p>如果子类有和父类重名的属性和方法,用super. 区分<br>如果没有重名,可以自己用,也可以super. this, 都一样</p></li></ul><p>-程序怎么识别某个方法呢?现在本类找有没有定义  再到父类一层一层找<br>9.override   重写覆盖父类  名字和参数严格一致的方法 </p><ul><li>override 方法返回类型必须是原方法返回类型的子类</li><li>override方法访问权限 只能大 不能小 </li><li>overload 只是本类同名方法的不同参数形式</li></ul><p>10.<strong>多态</strong> 提高代码复用性  便于维护拓展</p><ul><li>方法多态   父类方法中参数Animal  子类重写时参数可以是Dog类<br>11.上转型对象  Animal animal &#x3D;new Cat()<br>animal对象只能用她的编译类型的成员 ,只能用父类成员<br>Cat cat &#x3D;(Cat) animal   强制先下转型<br>12.方法的动态绑定  调用对象方法,方法与实际运行类型绑定<br>多态数组,父类定义的数组可以放子类,<br>13.&#x3D;&#x3D;判断基本类型时,值是否相等<br>    判断其他类型,判断地址<br> equal 默认用&#x3D;&#x3D;判断地址,子类重写以判断内容<br>所以判断内容时,用equal  (基本类型没有equal用&#x3D;&#x3D;)<br>  判断地址时用&#x3D;&#x3D;<br>14.hashcode()方法返回哈希码值  用于提高哈希表性能<br>不同对象的值不一样<br>15.toString() 默认返回全类名@十六进制的hashcode<br>直接输出对象默认调用toString()<br>16.finalize()在对象没有任何引用,需要被回收时自动调用,重写业务逻辑代码(释放数据库,打开的文件)<br>17.main方法<br>  java虚拟机静态调用main,无需创建对象. 接受编译命令,用作String数组参数<br>18.static 代码块 只会在类加载时执行一次<br>普通代码块每创建一次对象在构造器就执行一次</li></ul><p>类什么时候被加载?(new  子类加载时,父类也加载  使用类静态成员  )<br>静态代码块只能调用静态成员<br>构造器隐含了 1.super()  2.调用本普通代码块<br>19.子类创建对象时  调用顺序<br>    1.父类静态代码块和静态属性<br>    2.子类静态代码块和静态属性<br>    3.父类构造器(隐含执行普通代码块)<br>     4. 子类构造器(隐含执行普通代码块)<br>20.单例<br> 1.构造private防止直接new<br>2.类内声明一个private 静态对象<br>3.只向外暴露一个静态公共方法创建返回该对象<br>21.final<br>  1.不希望类被继承<br> 2.不希望方法可以被子类重写<br>3.不希望属性变量被修改,也叫产量,用大写下划线隔开<br>final+static 同时修饰,在调用时不会导致类被加载(底层优化了)<br>22.抽象类  是 设计者设计好之后 让子类继承并实现<br>抽象方法不能有方法体<br>一个非抽象类继承了抽象类,必须实现父类的所有抽象方法<br>抽象方法可以让不同类   同名方法的多态<br>23.接口<br>java8后接口里的默认实现方法和静态方法可以有方法体<br>接口就是 规范 实现的类 必须有的方法,且不同类的方法名 统一<br>接口中方法都是抽象方法,且public<br>接口中属性都是 public static fiinal<br>接口是对java单继承的补充<br>小猴子继承猴子的爬树方法,但是想要飞怎么办?实现飞翔的接口</p><p>接口的多态:多态参数 ,多态数组 ,多态传递(实现了A接口,也就实现了A父接口)<br>24.内部类:一般在方法中,可以直接访问外部类的所有成员,包括私有<br>内部类就像局部变量,不能加访问修饰,但是可以final<br>作用域仅在定义的方法中 其他方法中要访问内部类成员要通过创建其对象<br>匿名内部类,只用一次,可以当实参用<br>静态内部类:只能访问静态成员,外部类要使用内部类的成员要通过创建对象    如果成员重名,默认里面就近<br>25.枚举类:有限的几个值且不需要修改<br>1.enum 代替class<br>2.第一行   A(“agree”),B(“disagree”);<br>26.<br>错误:资源不足,堆溢出  内存不足 错误<br>异常:<br>运行时异常(检查不出来) :空指针 数组越界  类型转换  数字格式 数学运算   异常<br>编译时异常(不处理就没法运行)  网络数据库 文件</p><p>子类重写的方法抛出的异常 应该为 父方法抛出异常的子类<br>方法 throws 异常类<br>方法体中 throw  手动生成异常对象</p><p>27.Integer a &#x3D;45; 自动装箱调用valueof()时,数如果在-128到127内 不<br>创建新的对象</p><p>28.String a&#x3D;b+c; String对象相加 ,底层实现:<br>创建一个StringBuilder, 添加b,c   再转成String</p><p>String s&#x3D;”aaa” s指向常量池<br>String ss&#x3D;new String(“aaa”)   ss指向堆</p><p>常用方法:String.format(format,多个变量)<br>format 字符串中有占位符  %s  %d  %.2f  %c</p><p>29.StringBuffer()     无参构造器 默认容量为16<br>      StringBuffer( int capacity)  指定容量<br>      StringBuffer(String str)  指定内容    容量再次基础上+16<br>30.StringBuilder不具有线程安全,用作StringBuffer的简易替换<br>只在单个线程使用中,但比Buffer要快,优先使用<br>31.字符串很少修改—String<br>     大量修改,单线程—-StringBuilder<br>     大量修改,多线程—-StringBUffer<br> 32.Arrays.sort()自定义排序<br>System.out.println(Arrays.binarySearch(a, 8));<br> Integer[] newArr &#x3D; Arrays.copyOf(a, 2);<br>        Arrays.fill(newArr, 88);<br>Arrays.equals(a, newArr);<br>        List list &#x3D; Arrays.asList(arr);<br>33.property  get set 的内容<br>    区别于field<br>#34.单列集合(实现Collection接口) :]]<br>###List (ArrayList  LinkedList Vector)   有序 允许重复  支持索引</p><p>######ArrayList  由数组实现 允许null 基本等同Vector<br>线程不安全  增删效率低(数组)  查改效率高(索引)<br>默认容量为0 第一次扩容为10  此后1.5倍扩容<br>指定容量时,1.5倍扩容  Arrays.copy()方法扩容</p><p>LinkedList 双向链表  双端队列    可以存null<br>线程不安全<br>添加和删除不是通过数组,增删效率高,查改效率低(无索引)</p><p>查找较多用ArrayList  增删较多用LinkedList</p><p>Vector 由可变数组实现,线程安全但效率不高<br>  默认容量10 也可以指定大小    2倍扩容</p><p>Set(  HashSet TreeSet)   无序(添与取顺序不一致) 不允许重复<br> 无索引<br>hashset 底层是hashmap ,而hashmap底层是数组+链表+红黑树<br>1.添加一个元素,得到hash值,再转成索引值<br>2.查table,没有加入 有就equals   equals为真,添加 equals为假,不添加<br>扩容:<br>1.底层hashmap 第一次添加 扩到16  临界值为16<em>加载因子&#x3D;12<br>2. 到临界值 两倍扩容到32 新的临界值 32</em>0.75&#x3D;24 以此类推<br>3.如果单个链表个数&gt;&#x3D;8且table大小&gt;&#x3D;64 转成红黑树</p><p>LinkeHashSet是HashSet子类  底层是数组+双向链表 不能重复<br>有序!(存与取顺序一致)</p><p>TreeSet 底层用TreeMap实现,可以在构造器传入Compareble对元素进行排序</p><p>   #双列集合:Map 接口类 key不能重复,value可以重复  多个id可以有相同值     map.keySet()  map.values()  map.entrySet()<br>              TreeMap 可以在构造器传入Comparable进行元素排序<br>               HashMap(线程不安全) 和其子类LinkedHashMap<br>               HashTable  和其子类 Properties<br>hashtable (kv都不能为空,线程安全 初始化为11 临界系数0.75<br>  2倍+1扩容) </p><p>#集合的选择<br>  单列(Collection接口)<br>      有重复List<br>          查改多:ArrayList (数组有索引,查找快)<br>          增删多:LinkedList  双向链表<br>      无重复:Set<br>          无序:hashset  排序treeset<br>          存取顺序一致:Linkedhashset<br>  双列:Map<br>      键无序:HashMap   键排序TreeMap<br>      键存取顺序一致:LinkedHashMap<br>      读取文件:Properties<br>#Collections工具类  操作集合<br>reverse()   shuffle()  sort(list,Comparable )  swap()  max(list Comparable)<br><img src="https://s2.loli.net/2022/02/16/RQ2rqUhz6aDm9jS.png" alt="image.png"></p><p>#treeSet 添加的对象  必须有CompareTo,要么自己类就有,要么自定义,否则类型转换异常,<br>因为treeSet去重是通过compareto()方法的,返回0,就认为相同元素不添加<br>1.构造器传入Comparable匿名,自定义compareTo  2.添加对象自己实现的compareTo</p><p><img src="https://s2.loli.net/2022/02/16/l3ZsOVxRmtNuB5Q.png" alt="image.png"><br>#泛型:某一个类型<br>好处:1.约束数据类型 2.遍历时不需类型转化<br>静态成员不能使用泛型<br>泛型类  泛型方法  使用泛型前必须尖括号声明]<br>&lt;? extends A&gt;  表示 A或者其子类的泛型<br>&lt;? super A&gt; 表示 A或者其父类的泛型<br>#JUnit<br>方便测试某个方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;pubic  谁都可以&lt;br&gt;protected 同包和子类 可以访问&lt;br&gt;默认 同包可以访问&lt;br&gt;private  只有类内访问&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;6.&lt;strong&gt;封装&lt;/</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://pavaneyu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>mybatis-plus使用笔记</title>
    <link href="https://pavaneyu.github.io/2022/02/16/mybatis-plus%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>https://pavaneyu.github.io/2022/02/16/mybatis-plus%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2022-02-16T08:02:14.788Z</published>
    <updated>2022-02-16T08:26:45.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mapper接口对应一张表-关联entity"><a href="#mapper接口对应一张表-关联entity" class="headerlink" title="mapper接口对应一张表,关联entity"></a>mapper接口对应一张表,关联entity</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="使用mapper-操作一张表"><a href="#使用mapper-操作一张表" class="headerlink" title="使用mapper  操作一张表"></a>使用mapper  操作一张表</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">@org.junit.jupiter.api.Test</span><br><span class="line">public void test() &#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(null);</span><br><span class="line">    users.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h1 id="activeRecord-操作主题是某条记录-代替了mapper-entity继承model-lt-gt"><a href="#activeRecord-操作主题是某条记录-代替了mapper-entity继承model-lt-gt" class="headerlink" title="activeRecord  操作主题是某条记录,代替了mapper , entity继承model&lt;&gt;"></a>activeRecord  操作主题是某条记录,代替了mapper , entity继承model&lt;&gt;</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@TableName(&quot;user&quot;)//excludeProperty</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class User extends Model&lt;User&gt; &#123;</span><br><span class="line">    @TableId(type = IdType.ASSIGN_UUID)//id==primary key</span><br><span class="line">    private Integer id;</span><br><span class="line"></span><br><span class="line">    @TableField(&quot;name&quot;) //默认根据名称自动匹配属性跟列名，默认支持下划线映射驼峰,</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="支持原始自定义mapper和对应xml写SQL"><a href="#支持原始自定义mapper和对应xml写SQL" class="headerlink" title="支持原始自定义mapper和对应xml写SQL"></a>支持原始自定义mapper和对应xml写SQL</h1><p>但要注册xml到系统<code>mybatis-plus.mapper-locations=classpath*:/mapper/**/*.xml </code></p><h1 id="查询queryWrapper-条件-及分组"><a href="#查询queryWrapper-条件-及分组" class="headerlink" title="查询queryWrapper 条件  及分组"></a>查询queryWrapper 条件  及分组</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line">    <span class="keyword">public</span> void test() &#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        users.forEach(System.<span class="keyword">out</span>::println);</span><br><span class="line">        <span class="comment">//  int insert = userMapper.insert(new User(8, &quot;ff&quot;, &quot;dff&quot;));</span></span><br><span class="line">        <span class="comment">//   System.out.println(&quot;insert = &quot; + insert);</span></span><br><span class="line">        HashMap&lt;String, Object&gt; selectMap = new HashMap&lt;&gt;();</span><br><span class="line">        selectMap.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//默认为true，表示map的查询条件值为null也强制查询，false表忽略null的查询条件</span></span><br><span class="line"></span><br><span class="line">        queryWrapper</span><br><span class="line">                .exists(<span class="string">&quot;select name from user where id&gt;10&quot;</span>)</span><br><span class="line">                <span class="comment">//只有在exists存在记录的情况下才查询</span></span><br><span class="line">                .allEq(selectMap, <span class="literal">false</span>)<span class="comment">//不查询map中值为null的条件</span></span><br><span class="line">                .eq(<span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;bbb&quot;</span>)<span class="comment">//equalQuery</span></span><br><span class="line">                .ne(<span class="string">&quot;id&quot;</span>, <span class="number">5</span>)<span class="comment">//notEqual</span></span><br><span class="line">                .or()<span class="comment">//连接两个查询条件,默认是and</span></span><br><span class="line">                .gt(<span class="string">&quot;id&quot;</span>, <span class="number">7</span>)<span class="comment">//greaterThan</span></span><br><span class="line">                .ge(<span class="string">&quot;id&quot;</span>, <span class="number">4</span>)<span class="comment">//greaterOrEqual</span></span><br><span class="line">                .lt(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)<span class="comment">//lessThan</span></span><br><span class="line">                .le(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)<span class="comment">//lessOrEqual</span></span><br><span class="line">                .between(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>, <span class="number">7</span>)</span><br><span class="line">                .notBetween(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .like(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)</span><br><span class="line">                .notLike(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)</span><br><span class="line">                .likeLeft(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)<span class="comment">//左边模糊查询</span></span><br><span class="line">                .likeRight(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>)<span class="comment">//</span></span><br><span class="line">                .isNull(<span class="string">&quot;id&quot;</span>)<span class="comment">//查询字段值为null的所有记录</span></span><br><span class="line">                .isNotNull(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">                .<span class="keyword">in</span>(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>)<span class="comment">//id等于给定值的都返回</span></span><br><span class="line">                .notIn(<span class="string">&quot;id&quot;</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">                .inSql(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;select id from user where name=b&quot;</span>)<span class="comment">//相当于in查询,不过后面的列表是查询出来的</span></span><br><span class="line">                .notInSql(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;...&quot;</span>)</span><br><span class="line"></span><br><span class="line">                .orderByAsc(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">                .orderByDesc(<span class="string">&quot;id&quot;</span>)</span><br><span class="line"></span><br><span class="line">                .last(<span class="string">&quot;limit 3&quot;</span>);<span class="comment">//补充的sql放在末尾执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">        list.forEach(System.<span class="keyword">out</span>::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.jupiter.api.Test</span><br><span class="line">    <span class="keyword">public</span> void groupBy() &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.select(<span class="string">&quot;name,count(*) &quot;</span>);</span><br><span class="line">        queryWrapper.groupBy(<span class="string">&quot;name&quot;</span>);<span class="comment">//name相同的作为一条记录</span></span><br><span class="line">        List&lt;User&gt; users1 = userMapper.selectList(queryWrapper);</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;users1 = &quot;</span> + users1);</span><br><span class="line">        users1.forEach(System.<span class="keyword">out</span>::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="默认内存分页-可以配置分页拦截器实现物理分页"><a href="#默认内存分页-可以配置分页拦截器实现物理分页" class="headerlink" title="默认内存分页,可以配置分页拦截器实现物理分页"></a>默认内存分页,可以配置分页拦截器实现物理分页</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class Config &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public PaginationInnerInterceptor paginationInnerInterceptor() &#123;</span><br><span class="line">        return new PaginationInnerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">page</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.gt(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    Page&lt;User&gt; userPage = userMapper.selectPage(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">3</span>), queryWrapper);</span><br><span class="line">    List&lt;User&gt; records = userPage.getRecords();</span><br><span class="line">    records.forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;userPage.getTotal() 总记录数= &quot;</span> + userPage.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;userPage.getPages() 分了几页= &quot;</span> + userPage.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;userPage.getSize() 每页大小= &quot;</span> + userPage.getSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;userPage.getCurrent() 当前页数= &quot;</span> + userPage.getCurrent());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="自动生成entity类-service-controller-和原生mapper的xml代码"><a href="#自动生成entity类-service-controller-和原生mapper的xml代码" class="headerlink" title="自动生成entity类  service controller  和原生mapper的xml代码"></a>自动生成entity类  service controller  和原生mapper的xml代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">FastAutoGenerator</span><br><span class="line">               .create(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">               .globalConfig(builder -&gt; &#123;</span><br><span class="line">                   builder.author(<span class="string">&quot;ouyang&quot;</span>) <span class="comment">// 设置作者</span></span><br><span class="line">                        <span class="comment">//   .enableSwagger() // 开启 swagger 模式</span></span><br><span class="line">                         <span class="comment">//  .fileOverride() // 覆盖已生成文件</span></span><br><span class="line">                           .outputDir(<span class="string">&quot;D://&quot;</span>); <span class="comment">// 指定输出目录</span></span><br><span class="line">               &#125;)</span><br><span class="line">               .packageConfig(builder -&gt; &#123;</span><br><span class="line">                   builder.parent(<span class="string">&quot;com.ouyang.mpdemo&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">                          <span class="comment">// .moduleName(&quot;system&quot;) // 设置父包模块名</span></span><br><span class="line">                           .pathInfo(Collections.singletonMap(OutputFile.mapperXml, <span class="string">&quot;com/ouyang/mpdemo/mapper&quot;</span>)); <span class="comment">// 设置mapperXml生成路径</span></span><br><span class="line">               &#125;)</span><br><span class="line">               .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                   builder.addInclude(<span class="string">&quot;t_simple&quot;</span>) <span class="comment">// 设置需要生成的表名</span></span><br><span class="line">                           .addTablePrefix(<span class="string">&quot;t_&quot;</span>, <span class="string">&quot;c_&quot;</span>); <span class="comment">// 设置过滤表前缀</span></span><br><span class="line">               &#125;)</span><br><span class="line">               <span class="comment">//.templateEngine(new FreemarkerTemplateEngine()) // 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">               .execute();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;mapper接口对应一张表-关联entity&quot;&gt;&lt;a href=&quot;#mapper接口对应一张表-关联entity&quot; class=&quot;headerlink&quot; title=&quot;mapper接口对应一张表,关联entity&quot;&gt;&lt;/a&gt;mapper接口对应一张表,关联entity&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public interface UserMapper extends BaseMapper&amp;lt;User&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://pavaneyu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>IDEA 使用技巧</title>
    <link href="https://pavaneyu.github.io/2022/02/16/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://pavaneyu.github.io/2022/02/16/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2022-02-16T07:58:00.760Z</published>
    <updated>2022-03-15T06:22:42.507Z</updated>
    
    <content type="html"><![CDATA[<p>正则生成和验证弹窗</p><p>返回值为boolean的方法加+! 自动取反    fixme注释</p><p>.return<br>.syn<br>.nn</p><p>.null</p><p>.castvar</p><p>.while</p><p>逻辑表达式.not  取反<br>.format<br>.field<br>.for    也可以.foreach(方法)拥抱函数式编程</p><span id="more"></span><p>live template<br>大写I    fi</p><p>alt+G   generate<br>alt+n   new<br>Ctrl+O  重写方法<br>c+a+b  查看接口实现类<br>c+h       查看继承关系</p><p>自动导入没有歧义的类和自动删除无用import<br>小写也能识别类<br>多行一起操作 alt+滑鼠左鍵拖拉選取</p><p>1.keymap</p><ul><li>缩进用tab，选中整体右移  左移用shft+tab</li><li>c+&#x2F;   注释单行   第二次取消        c+s+&#x2F;      添加 &#x2F;**&#x2F;注释</li><li>c+hierarchy</li><li>ctrl+J 提示快捷模板</li></ul><p>3.后缀补全<br> .var 自动创建变量,分配变量名<br>.()括号<br>.for<br>4.自定义模板  fi   </p><ul><li>Itit 自动迭代</li><li>大写I  增强for</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;正则生成和验证弹窗&lt;/p&gt;
&lt;p&gt;返回值为boolean的方法加+! 自动取反    fixme注释&lt;/p&gt;
&lt;p&gt;.return&lt;br&gt;.syn&lt;br&gt;.nn&lt;/p&gt;
&lt;p&gt;.null&lt;/p&gt;
&lt;p&gt;.castvar&lt;/p&gt;
&lt;p&gt;.while&lt;/p&gt;
&lt;p&gt;逻辑表达式.not  取反&lt;br&gt;.format&lt;br&gt;.field&lt;br&gt;.for    也可以.foreach(方法)拥抱函数式编程&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://pavaneyu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring笔记</title>
    <link href="https://pavaneyu.github.io/2022/02/16/Spring%E7%AC%94%E8%AE%B0/"/>
    <id>https://pavaneyu.github.io/2022/02/16/Spring%E7%AC%94%E8%AE%B0/</id>
    <published>2022-02-16T07:56:40.016Z</published>
    <updated>2022-06-14T12:39:14.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>IOC  控制反转  :创建对象的过程交给Spring</p><p>AOP面向切面:不修改源代码进行内容增强 </p><span id="more"></span><h1 id="原始XML注册对象"><a href="#原始XML注册对象" class="headerlink" title="原始XML注册对象"></a>原始XML注册对象</h1><p>xmlBean里用setter方法设置属性值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">      &lt;property name=&quot;name&quot; value=&quot;Ouyang&quot;&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;name&quot;&gt;</span><br><span class="line">            &lt;null&gt;&lt;/null&gt;   设为null</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">         &lt;property name=&quot;name&quot;&gt;</span><br><span class="line">            &lt;value&gt;&lt;![CDATA[&lt;&lt;Hello&gt;&gt;]]&gt;&lt;/value&gt;  设置特殊值 或者用转义</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">      property内部可以再嵌套一个bean  表示 属性是个类</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;property name=&quot;likes&quot;&gt;</span><br><span class="line">        &lt;array&gt;                                       设置数组属性</span><br><span class="line">            &lt;value&gt;吃饭&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;睡觉&lt;/value&gt;</span><br><span class="line">        &lt;/array&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">       </span><br><span class="line">        &lt;property name=&quot;map&quot;&gt;         设置map属性</span><br><span class="line">            &lt;map&gt;</span><br><span class="line">                &lt;entry key=&quot;A&quot; value=&quot;B&quot;&gt;&lt;/entry&gt;</span><br><span class="line">                &lt;entry key=&quot;C&quot; value=&quot;D&quot;&gt; &lt;/entry&gt;</span><br><span class="line">            &lt;/map&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">       &lt;property name=&quot;list&quot;&gt;    </span><br><span class="line">            &lt;list&gt;                  设置list&lt;User&gt;属性,先在外层新建好几个Userbean对象</span><br><span class="line">                &lt;ref bean=&quot;user1&quot;/&gt;</span><br><span class="line">                &lt;ref bean=&quot;user2&quot;/&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;bean id=&quot;user2&quot; class=&quot;com.ouyang.User&quot;&gt;   </span><br><span class="line">&lt;!--        对象名            对象类型--&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;lwj&quot;/&gt;  </span><br><span class="line">&lt;!--        属性名              属性值--&gt;</span><br><span class="line">  </span><br><span class="line">  不在list里面对元素赋值 先赋值好再直接引用行不行?</span><br><span class="line">        &lt;property name=&quot;list&quot; ref=&quot;userList&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;util:list id=&quot;userList&quot;&gt;</span><br><span class="line">        &lt;bean id=&quot;user3&quot; class=&quot;com.ouyang.User&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;username&quot; value=&quot;aa&quot;/&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">        &lt;bean id=&quot;user4&quot; class=&quot;com.ouyang.User&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;username&quot; value=&quot;bb&quot;/&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">    &lt;/util:list&gt;</span><br></pre></td></tr></table></figure><h2 id="xml里用有参构造器设置属性值"><a href="#xml里用有参构造器设置属性值" class="headerlink" title="xml里用有参构造器设置属性值"></a>xml里用有参构造器设置属性值</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;constructor-arg name=&quot;name&quot; value=&quot;Liu&quot;&gt;&lt;/constructor-arg&gt;</span><br></pre></td></tr></table></figure><h2 id="xml注入集合属性"><a href="#xml注入集合属性" class="headerlink" title="xml注入集合属性"></a>xml注入集合属性</h2><h2 id="工厂bean对象"><a href="#工厂bean对象" class="headerlink" title="工厂bean对象:"></a>工厂bean对象:</h2><p>xml定义的factorybean接口实现类型(真正的返回类型是方法里面)</p><p> 可以与java里返回的对象类型不一样<br>在java代码里,从文件找,竟然找到一个工厂bean ,那就找工厂的产品 !</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;myFactoryBean&quot; class=&quot;com.ouyang.myFactoryBean&quot;&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class myFactoryBean implements FactoryBean&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public User getObject() throws Exception &#123;</span><br><span class="line">        User user = new User();</span><br><span class="line">        user.setUsername(&quot;oii&quot;);</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = new ClassPathXmlApplicationContext(&quot;com/ouyang/factoryBean.xml&quot;);</span><br><span class="line">User user = context.getBean(&quot;myFactoryBean&quot;, User.class);</span><br></pre></td></tr></table></figure><h2 id="默认bean是singleton-单例-加载xml时自动创建singleton"><a href="#默认bean是singleton-单例-加载xml时自动创建singleton" class="headerlink" title="默认bean是singleton,单例,加载xml时自动创建singleton"></a><strong>默认bean是singleton,单例,加载xml时自动创建singleton</strong></h2><p> bean属性     scope&#x3D;”prototype”  设置bean为原型  可以有多个对象 ,getBean()才会创建对象</p><h2 id="bean生命周期"><a href="#bean生命周期" class="headerlink" title="bean生命周期"></a><strong>bean生命周期</strong></h2><p>1.xml构造器创建实例<br>2.xmlsetter设置属性(包括引用其他bean的属性)<br>3.配置初始化方法  bean属性 init-method&#x3D;””<br>4.getBean获取并使用bean<br>5.配置销毁bean方法  bean属性 destroy-method&#x3D;”getObject”  context.close()</p><h2 id="xml中为所有bean添加后置处理器"><a href="#xml中为所有bean添加后置处理器" class="headerlink" title="xml中为所有bean添加后置处理器"></a><strong>xml中为所有bean添加后置处理器</strong></h2><p><code>&lt;bean id=&quot;myBeanPost&quot; class=&quot;com.ouyang.myBeanPost&quot;/&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">实现类</span><br><span class="line">public class myBeanPost implements BeanPostProcessor &#123;</span><br><span class="line">    @Nullable</span><br><span class="line">    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">        System.out.println(&quot;初始化之前调用方法&quot;);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Nullable</span><br><span class="line">    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">        System.out.println(&quot;初始化之后调用方法&quot;);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="xml自动根据外部bean配置类对象属性-很少用-往往基于注解注入属性"><a href="#xml自动根据外部bean配置类对象属性-很少用-往往基于注解注入属性" class="headerlink" title="xml自动根据外部bean配置类对象属性 (很少用   ,往往基于注解注入属性)"></a><strong>xml自动根据外部bean配置类对象属性</strong> (很少用   ,往往基于注解注入属性)</h2><p>bea  n 属性 autowire&#x3D;”byName”    根据外部bean id 配置这个bean中同名属性<br>bean 属性 autowire&#x3D;”byType  “    根据外部bean 类 配置这个bean中同类属性<br>第二种只能有一种外部bean</p><h2 id="xml引入外部文件"><a href="#xml引入外部文件" class="headerlink" title="xml引入外部文件"></a><strong>xml引入外部文件</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:property-placeholder location=&quot;classpath:com/ouyang/jdbc.properties&quot;/&gt;   src目录下</span><br><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;com.ouyang.User&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;username&quot; value=&quot;$&#123;userName&#125;&quot;/&gt;   key值</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h1 id="注解创建Bean对象"><a href="#注解创建Bean对象" class="headerlink" title="注解创建Bean对象"></a><strong>注解创建Bean对象</strong></h1><h2 id="配置类开启需要组件扫描"><a href="#配置类开启需要组件扫描" class="headerlink" title="配置类开启需要组件扫描"></a>配置类开启需要组件扫描</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan(basePackages =&quot;com.ouyang&quot;)</span><br></pre></td></tr></table></figure><h2 id="需要创建对象的类上写注解-来创建对象"><a href="#需要创建对象的类上写注解-来创建对象" class="headerlink" title="需要创建对象的类上写注解         来创建对象"></a>需要创建对象的类上写注解         来创建对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Component(value = &quot;user&quot;) //value(变量名)可以不写,默认为类名(首字母转换为小写)</span><br><span class="line">在service类上写@Service   </span><br><span class="line">在Dao类 写@Repository</span><br></pre></td></tr></table></figure><h2 id="手动获取对象"><a href="#手动获取对象" class="headerlink" title="手动获取对象"></a>手动获取对象</h2><p> context.getBean(变量名,bean类型.class)</p><p>补充:组件扫描自定义规则 ,比如只扫描Component注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:component-scan base-package=&quot;com.ouyang&quot; use-default-filters=&quot;false&quot;&gt;</span><br><span class="line">    &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Component&quot;/&gt;</span><br><span class="line">&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure><h2 id="自动获取对象-自动注入"><a href="#自动获取对象-自动注入" class="headerlink" title="自动获取对象(自动注入)"></a>自动获取对象(自动注入)</h2><p>在需要设置属性的对象上,写注解<br>@Autowired  根据类型自动注入,如果有多个同类型,需要配合  @Qualifier精准注入特定名字的bean</p><p>@Resource   注入特定名称的bean<br>@Value          注入普通类型   </p><p><strong>例如 MyService类中有个Dao类型的属性 ,用注解创建Bean对象,并设置该属性的值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan(basePackages = &#123;&quot;com.ouyang&quot;&#125;)</span><br><span class="line">public class config &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Repository  //</span><br><span class="line">public class Dao  &#123;</span><br><span class="line">    public void add() &#123;</span><br><span class="line">        System.out.println(&quot;dao is adding&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service(value = &quot;myy&quot;)</span><br><span class="line">public class MyService &#123;</span><br><span class="line">//    @Autowired  //按类型注入Bean对象,</span><br><span class="line">//    @Qualifier(value = &quot;dao&quot;)//如果有多个,需要写明对象名称,需要跟 @Autowired一起使用</span><br><span class="line">    @Resource(name = &quot;dao&quot;)</span><br><span class="line">    private Dao basicBao;</span><br><span class="line"></span><br><span class="line">    @Value(value = &quot;32&quot;)</span><br><span class="line">    public int anInt;</span><br><span class="line"></span><br><span class="line">    public void add() &#123;</span><br><span class="line">        System.out.println(&quot;service add&quot;);</span><br><span class="line">        basicBao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class AnnotationTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">      //  ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;com/ouyang/Annotation/bean2.xml&quot;);</span><br><span class="line">        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(config.class);</span><br><span class="line"></span><br><span class="line">        MyService myService = context.getBean(&quot;myy&quot;, MyService.class);</span><br><span class="line">        myService.add();</span><br><span class="line">        System.out.println(myService.anInt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>连接点   可以被增强的方法<br>切入点   实际被增强的方法<br>通知(增强)  增强的逻辑部分<br>   前置<br> 后置通知<br>环绕(前后置)<br>异常通知<br> finally通知</p><h2 id="1-配置文件里开启切面自动代理"><a href="#1-配置文件里开启切面自动代理" class="headerlink" title="1.配置文件里开启切面自动代理"></a>1.配置文件里开启切面自动代理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan(basePackages = &#123;&quot;com.ouyang.AOP&quot;&#125;) //如果父目录下有相关同名类,一定要细化扫描范围</span><br><span class="line">@EnableAspectJAutoProxy //有Aspect注解的类自动生成代理</span><br><span class="line">public class Config &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-需要增强的类和方法"><a href="#2-需要增强的类和方法" class="headerlink" title="2.需要增强的类和方法"></a>2.需要增强的类和方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Component(value = &quot;user&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line">    public void use() &#123;</span><br><span class="line">        System.out.println(&quot;using&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Aspect-提供增强的类-增强方法注解-before-After-Around-表示怎样增强"><a href="#3-Aspect-提供增强的类-增强方法注解-before-After-Around-表示怎样增强" class="headerlink" title="3. @Aspect 提供增强的类    增强方法注解@before @After @Around 表示怎样增强"></a>3. @Aspect 提供增强的类    增强方法注解@before @After @Around 表示怎样增强</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">@Order(1) //如果有多个增强类对同一个方法进行插入增强,设置优先级</span><br><span class="line">public class UserProxy &#123;</span><br><span class="line">    @Pointcut(value = &quot;execution(* com.ouyang.AOP.User.use(..))&quot;)</span><br><span class="line">    public void pointCut() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Before(value = &quot;pointCut()&quot;)</span><br><span class="line">    //切入点表达式 (权限修饰+被增强类路径+被增强方法+方法参数列表)</span><br><span class="line">    public void before() &#123;</span><br><span class="line">        System.out.println(&quot;before using&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @AfterReturning(value = &quot;pointCut()&quot;)</span><br><span class="line">    public void 返回通知() &#123;</span><br><span class="line">        System.out.println(&quot;前一个执行成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @After(value = &quot;pointCut()&quot;)</span><br><span class="line">    public void 最终通知() &#123;//不管被插入的地方 有无异常都执行</span><br><span class="line">        System.out.println(&quot;finally&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @AfterThrowing(value = &quot;pointCut()&quot;)</span><br><span class="line">    public void exception() &#123;</span><br><span class="line">        System.out.println(&quot;an exception!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Around(value = &quot;pointCut()&quot;)</span><br><span class="line">    public void around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;环绕之前&quot;);</span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(&quot;环绕之后 &quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-使用及结果"><a href="#4-使用及结果" class="headerlink" title="4.使用及结果"></a>4.使用及结果</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class TestAOP &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class);</span><br><span class="line">        User user = context.getBean(&quot;user&quot;, User.class);  //得到被增强的对象</span><br><span class="line">        user.use();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">环绕之前</span><br><span class="line">before using</span><br><span class="line">using</span><br><span class="line">前一个执行成功</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">环绕之后 </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.AOP底层原理  </p><p>jdk的一个动态代理和这个cglib的一个动态代理。<br>被代理类如果有实现接口，就是jdk代理，如果有继承父类，就是cglib代理，默认是jdk代理</p><h1 id="结构分层"><a href="#结构分层" class="headerlink" title="结构分层"></a>结构分层</h1><p> <strong>应用层  调用逻辑层方法<br>  逻辑指挥层 进行业务操作  只调用实现层方法<br>  具体实现层(包括数据库实现和其他实现 ) 调用API   不涉及业务逻辑<br>  抽象层规定脉络</strong></p><h1 id="事务-Transactional"><a href="#事务-Transactional" class="headerlink" title="事务@Transactional"></a>事务@Transactional</h1><h2 id="ACID特性"><a href="#ACID特性" class="headerlink" title="ACID特性"></a>ACID特性</h2><p>原子性 :不可分割  atomicity<br>一致性:事务前后总量一致consistency<br>隔离性:多个事务不会互相影响 isolation<br>持久性:事务提交后,数据库里永久保存 durability</p><h2 id="事务参数"><a href="#事务参数" class="headerlink" title="事务参数"></a>事务参数</h2><p>1.propagation  传播   多事务方法直接调用,如何管理  默认required<br><img src="https://upload-images.jianshu.io/upload_images/19490681-8a509372829d34ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>2.ioslation 隔离   避免并发时多事务之间  产生的问题<br>    脏读 一个未提交的事务A读到了另一个未提交的事务B的数据<br>    不可重复读:一个未提交的事务A读到了   已经提交的事务B的修改的数据<br>    幻读:一个未提交的事务A读到了另一个未提交的事务B的提交的数据<br><img src="https://upload-images.jianshu.io/upload_images/19490681-d1e4b11529ba2b3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>3.timeout 默认-1 不计算超时   以秒为单位<br>4.readOnly  默认false<br>5.rollBackFor  哪些异常需要回滚</p><h1 id="完全注解步骤"><a href="#完全注解步骤" class="headerlink" title="完全注解步骤"></a><strong>完全注解步骤</strong></h1><h2 id="1-config类"><a href="#1-config类" class="headerlink" title="1.config类"></a>1.config类</h2><p> 几个Bean DataSource  jdbcTemplate   TransactionManager</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 2022-02-05 16:28</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@ComponentScan(basePackages = &quot;com.ouyang.JDBCTemplate使用&quot;)</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">public class TxConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public DruidDataSource getDataSource() &#123;</span><br><span class="line">        DruidDataSource druidDataSource = new DruidDataSource();</span><br><span class="line">        druidDataSource.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">        druidDataSource.setUrl(&quot;jdbc:mysql://localhost:3306/db01&quot;);</span><br><span class="line">        druidDataSource.setPassword(&quot;&quot;);</span><br><span class="line">        druidDataSource.setUsername(&quot;root&quot;);</span><br><span class="line">        return druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public JdbcTemplate getJdbcTemplate(DataSource dataSource) &#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = new JdbcTemplate();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        return jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public DataSourceTransactionManager getDataSourceTransactionManager(DataSource dataSource) &#123;</span><br><span class="line">        DataSourceTransactionManager dataSourceTransactionManager = new DataSourceTransactionManager();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(dataSource);</span><br><span class="line">        return dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-业务逻辑层-开启事务"><a href="#2-业务逻辑层-开启事务" class="headerlink" title="2.业务逻辑层  开启事务"></a>2.业务逻辑层  开启事务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Service(value = &quot;accService&quot;)</span><br><span class="line">@Transactional( readOnly = false,propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)</span><br><span class="line"></span><br><span class="line">public class AccService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AccDao accDao;</span><br><span class="line"></span><br><span class="line">    public void transMoney(String from, String to, int money) &#123;</span><br><span class="line">        accDao.addMoney(money, from);</span><br><span class="line">        //  int i = 10 / 0;</span><br><span class="line">        accDao.reduceMoney(money, to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-抽象层"><a href="#3-抽象层" class="headerlink" title="3.抽象层"></a>3.抽象层</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface AccDao &#123;</span><br><span class="line">    void addMoney(int money,String name);</span><br><span class="line"></span><br><span class="line">    void reduceMoney(int money,String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-数据操作层"><a href="#4-数据操作层" class="headerlink" title="4.数据操作层"></a>4.数据操作层</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public class AccDaoImpl implements AccDao&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addMoney(int money, String name) &#123;</span><br><span class="line">        int update = jdbcTemplate.update(&quot;update table_account set money=money-? where name=? &quot;, money, name);</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void reduceMoney(int money, String name) &#123;</span><br><span class="line">        int update = jdbcTemplate.update(&quot;update table_account set money=money+? where name=? &quot;, money, name);</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-应用层"><a href="#5-应用层" class="headerlink" title="5.应用层"></a>5.应用层</h2> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class AccTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">//        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;com/ouyang/JDBCTemplate使用/config/Empconfig.xml&quot;);</span><br><span class="line">        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(TxConfig.class);</span><br><span class="line"></span><br><span class="line">        AccService accService = context.getBean(&quot;accService&quot;, AccService.class);</span><br><span class="line"></span><br><span class="line">        accService.transMoney(&quot;oyy&quot;,&quot;liu&quot;,100);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="在Spring中注册自己new出来的对象"><a href="#在Spring中注册自己new出来的对象" class="headerlink" title="在Spring中注册自己new出来的对象"></a>在Spring中注册自己new出来的对象</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GenericApplicationContext context = new GenericApplicationContext();</span><br><span class="line">context.refresh();</span><br><span class="line"></span><br><span class="line">//第三个参数是一个Supplier函数</span><br><span class="line">context.registerBean(&quot;varUser&quot;, Account.class, Account::new);</span><br><span class="line">Account account = context.getBean(&quot;varUser&quot;, Account.class);</span><br><span class="line">System.out.println(account);</span><br></pre></td></tr></table></figure><p>整合JUnit5 的注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//@ExtendWith(SpringExtension.class)</span><br><span class="line">//@ContextConfiguration(classes = TxConfig.class)</span><br><span class="line">@SpringJUnitConfig(classes = TxConfig.class)//相当于上面两行注解</span><br><span class="line">public class 整合JUnit5 &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private AccService accService;</span><br><span class="line"></span><br><span class="line">    @Test </span><br><span class="line">    public void tr() &#123;</span><br><span class="line">        accService.transMoney(&quot;oyy&quot;, &quot;liu&quot;, 300);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="WebFlux-响应式编程-观察者模式-异步非阻塞"><a href="#WebFlux-响应式编程-观察者模式-异步非阻塞" class="headerlink" title="WebFlux  响应式编程(观察者模式)  异步非阻塞"></a>WebFlux  响应式编程(观察者模式)  异步非阻塞</h1><p>在Spring里面分别用注解和函数式编程实现</p><h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p><img src="https://s2.loli.net/2022/02/22/wBa4XkLhxCeKruJ.png" alt="image.png"><br><img src="https://s2.loli.net/2022/02/22/t7gW92EwpNLoMru.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/02/22/KzqF4HSx2NTevlM.png" alt="image.png"><br><img src="https://s2.loli.net/2022/02/22/9PJXMxtBeD1qohk.png" alt="image.png"></p><h3 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h3><p>1.核心控制器DispatchHandler 实现了WebHandler接口的handle方法<img src="https://s2.loli.net/2022/02/22/s8tYhkrpuqKdTRe.png" alt="image.png"><br><img src="https://s2.loli.net/2022/02/22/yOUBlT7w1uakjWV.png" alt="image.png"><br><img src="https://s2.loli.net/2022/02/22/axQEWXJfTdoshB9.png" alt="image.png"></p><h2 id="注解-方式实现webflux-从浏览器查询数据库"><a href="#注解-方式实现webflux-从浏览器查询数据库" class="headerlink" title="注解 方式实现webflux,从浏览器查询数据库"></a>注解 方式实现webflux,从浏览器查询数据库</h2><h3 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1.依赖"></a>1.依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;io.projectreactor&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;reactor-core&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.0.21&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="2-启动端口号-server-port-x3D-8081"><a href="#2-启动端口号-server-port-x3D-8081" class="headerlink" title="2.启动端口号   server.port&#x3D;8081"></a>2.启动端口号   server.port&#x3D;8081</h3><h3 id="3-数据库相关配置类"><a href="#3-数据库相关配置类" class="headerlink" title="3.数据库相关配置类"></a>3.数据库相关配置类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ComponentScan(basePackages = &quot;com.ouyang.reactordemo&quot;)</span><br><span class="line">public class Config &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 数据源  绑定数据库参数</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public DruidDataSource getDataSource() &#123;</span><br><span class="line">        DruidDataSource druidDataSource = new DruidDataSource();</span><br><span class="line">        druidDataSource.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">        druidDataSource.setUrl(&quot;jdbc:mysql://localhost:3306/db01&quot;);</span><br><span class="line">        druidDataSource.setUsername(&quot;root&quot;);</span><br><span class="line">        druidDataSource.setPassword(&quot;&quot;);</span><br><span class="line">        return druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * &#123;@link JdbcTemplate&#125; 绑定数据源</span><br><span class="line">     * @param dataSource</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public JdbcTemplate getJdbcTemplate(DataSource dataSource) &#123;</span><br><span class="line">        return new JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 事务管理器绑定 数据源</span><br><span class="line">     * @param dataSource</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public DataSourceTransactionManager getDataSourceTransactionManager(DataSource dataSource) &#123;</span><br><span class="line">        return new DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-数据操作类Dao-注入jdbctemplate"><a href="#4-数据操作类Dao-注入jdbctemplate" class="headerlink" title="4.数据操作类Dao  注入jdbctemplate"></a>4.数据操作类Dao  注入jdbctemplate</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Repository(value = &quot;bookDaoImpl&quot;)</span><br><span class="line">public class EmpDaoImpl implements EmpDaoIn &#123;</span><br><span class="line">    @Autowired //注入的bean在config里创建好了</span><br><span class="line">    private JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void add(Employee employee) &#123;</span><br><span class="line">        int update = jdbcTemplate.update(</span><br><span class="line">                &quot;insert into employee values (?,?,?)&quot;,</span><br><span class="line">                employee.getId(),</span><br><span class="line">                employee.getName(),</span><br><span class="line">                employee.getResume()</span><br><span class="line">        );</span><br><span class="line">        System.out.println(update+&quot; rows added&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void deleteByID(int i) &#123;</span><br><span class="line">        int update = jdbcTemplate.update(&quot;delete from employee where id=?&quot;, i);</span><br><span class="line">        System.out.println(update +&quot; row deleted&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void update(Employee employee) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void select(Employee employee) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int selectCount() &#123;</span><br><span class="line">        return jdbcTemplate.queryForObject(&quot;select count(*) from employee&quot;, Integer.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Employee queryOneByID(int id) &#123;</span><br><span class="line">        Employee employee = jdbcTemplate.queryForObject(</span><br><span class="line">                &quot;select * from employee where id=?&quot;,</span><br><span class="line">                new BeanPropertyRowMapper&lt;&gt;(Employee.class),</span><br><span class="line">                id</span><br><span class="line">        );</span><br><span class="line">        return employee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Employee&gt; querySomeByName(String name) &#123;</span><br><span class="line">        return jdbcTemplate.query(</span><br><span class="line">                &quot;select *from employee where name =?&quot;,</span><br><span class="line">                new BeanPropertyRowMapper&lt;&gt;(Employee.class),</span><br><span class="line">                name</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Employee&gt; queryAll() &#123;</span><br><span class="line">        return jdbcTemplate.query(&quot;select * from employee&quot;, new BeanPropertyRowMapper&lt;&gt;(Employee.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addBatch(List&lt;Object[]&gt; batchArgs) &#123;</span><br><span class="line">        int[] ints = jdbcTemplate.batchUpdate(&quot;insert into employee values (?,?,?)&quot;, batchArgs);</span><br><span class="line">        System.out.println(Arrays.toString(ints));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-业务逻辑层Service-注入DAO"><a href="#5-业务逻辑层Service-注入DAO" class="headerlink" title="5.业务逻辑层Service   注入DAO"></a>5.业务逻辑层Service   注入DAO</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Repository</span><br><span class="line">public class MyService implements EmpService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private EmpDaoImpl empDao;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Employee&gt; getEmpByID(int id) &#123;</span><br><span class="line">        return Mono.just(empDao.queryOneByID(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Flux&lt;Employee&gt; getAllEmps() &#123;</span><br><span class="line">        return Flux.fromIterable(empDao.queryAll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Void&gt; addEmp(Mono&lt;Employee&gt; empMono) &#123;</span><br><span class="line">        return empMono.doOnNext(employee -&gt; empDao.add(employee)).thenEmpty(Mono.empty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Flux&lt;Employee&gt; getEmpsByName(String name) &#123;</span><br><span class="line">        return Flux.fromIterable(empDao.querySomeByName(name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-controller-层"><a href="#6-controller-层" class="headerlink" title="6.controller 层"></a>6.controller 层</h3><p>@RestController 告诉spring 这个是导航类<br> 注入service   实现 根据url导航到service具体方法 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class EmpController &#123;</span><br><span class="line"></span><br><span class="line">    //    @Resource(name = &quot;my&quot;)</span><br><span class="line">    @Autowired</span><br><span class="line">    public MyService myService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/emp/id=&#123;id&#125;&quot;)  //浏览器查询匹配到就会进入这个方法</span><br><span class="line">    public Mono&lt;Employee&gt; getEmpByID(@PathVariable int id) &#123; //表示id从地址栏路径获取</span><br><span class="line">        return myService.getEmpByID(id);  //</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/emps&quot;)</span><br><span class="line">    public Flux&lt;Employee&gt; getAllEmps() &#123;</span><br><span class="line">        return myService.getAllEmps();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;emp/name=&#123;name&#125;&quot;)</span><br><span class="line">    public Flux&lt;Employee&gt; getEmpsByName(@PathVariable String name) &#123;</span><br><span class="line">        return myService.getEmpsByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/add&quot;)</span><br><span class="line">    public Mono&lt;Void&gt; saveEmp(@RequestBody Employee employee) &#123;</span><br><span class="line">        return myService.addEmp(Mono.just(employee));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用函数式编程而非注解实现WebFlux-使用模拟数据"><a href="#用函数式编程而非注解实现WebFlux-使用模拟数据" class="headerlink" title="用函数式编程而非注解实现WebFlux(使用模拟数据)"></a>用函数式编程而非注解实现WebFlux(使用模拟数据)</h2><p>0.测试API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Flux容器注入对应属性方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).subscribe(System.out::println);</span><br><span class="line">        Mono.just(<span class="number">8</span>).subscribe(System.out::println);</span><br><span class="line">        Flux.fromArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>&#125;).subscribe(System.out::println);</span><br><span class="line">        Flux.fromIterable(Arrays.asList(<span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>)).subscribe(System.out::println);</span><br><span class="line">        Flux.fromStream(Stream.of(<span class="number">5</span>, <span class="number">8</span>, <span class="number">8</span>)).subscribe(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.服务器绑定adapter,adapter绑定路由<br>2.路由绑定handler   ,通过Url类型  导航到 handler 具体方法 ,返回一个RouterFunction<ServerResponse><br>3.handler 绑定 一个service ,根据Url里面参数,用service获取一个Flux<br>再把Flux统一转成Mono<ServerResponse></ServerResponse></ServerResponse></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Server &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        new Server().createReactorServer();</span><br><span class="line">        System.out.println(&quot;enter to exit&quot;);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 路由 指明由地址栏解析的请求具体 去执行那个方法  bind handler  ,</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public RouterFunction&lt;ServerResponse&gt; routerFunction() &#123;</span><br><span class="line">        EmpHandler handler = new EmpHandler(new MyService());</span><br><span class="line"></span><br><span class="line">        return RouterFunctions.route(</span><br><span class="line">                RequestPredicates.GET(&quot;/emps/id=&#123;id&#125;&quot;).and(RequestPredicates.accept(MediaType.APPLICATION_JSON)),</span><br><span class="line">                handler::getEmpByID</span><br><span class="line">        ).andRoute(</span><br><span class="line">                RequestPredicates.GET(&quot;/emps&quot;).and(RequestPredicates.accept(MediaType.APPLICATION_JSON)),</span><br><span class="line">                handler::getAllEmps</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 适配器 binds with router</span><br><span class="line">     */</span><br><span class="line">    public void createReactorServer() &#123;</span><br><span class="line"></span><br><span class="line">        HttpHandler httpHandler = RouterFunctions.toHttpHandler(routerFunction());</span><br><span class="line">        ReactorHttpHandlerAdapter adapter = new ReactorHttpHandlerAdapter(httpHandler);</span><br><span class="line"></span><br><span class="line">        //server binds adapter</span><br><span class="line">        HttpServer.create().handle(adapter).bindNow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class EmpHandler &#123;</span><br><span class="line">    private final EmpService empService;  //handler binds with service</span><br><span class="line"></span><br><span class="line">    public EmpHandler(EmpService empService) &#123;//这里的形参是接口,传入要传入一个具体实现类</span><br><span class="line">        this.empService = empService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Mono&lt;ServerResponse&gt; getEmpByID(ServerRequest request) &#123;</span><br><span class="line">        int id = Integer.parseInt(request.pathVariable(&quot;id&quot;));</span><br><span class="line">        Mono&lt;Employee&gt; employeeMono = empService.getEmpByID(id);</span><br><span class="line">//        employeeMono.flatMap( employee -&gt; ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(employee,employee.getClass()))</span><br><span class="line">        return employeeMono.flatMap( employee -&gt; ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(fromObject(employee)))</span><br><span class="line">                .switchIfEmpty(ServerResponse.notFound().build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Mono&lt;ServerResponse&gt; getAllEmps(ServerRequest request) &#123;</span><br><span class="line">        Flux&lt;Employee&gt; allEmps = empService.getAllEmps();</span><br><span class="line">        return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(allEmps, Employee.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Mono&lt;ServerResponse&gt; addEmp(ServerRequest request) &#123;</span><br><span class="line">        Mono&lt;Employee&gt; employeeMono = request.bodyToMono(Employee.class);</span><br><span class="line">        return ServerResponse.ok().build(empService.addEmp(employeeMono));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public class MyService implements EmpService &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;Employee&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        list.add(new Employee(1, &quot;a&quot;, &quot;A&quot;));</span><br><span class="line">        list.add(new Employee(2, &quot;b&quot;, &quot;B&quot;));</span><br><span class="line">        //list.add(new Employee(3, &quot;c&quot;, &quot;C&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public List&lt;Employee&gt; getList() &#123;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Employee&gt; getEmpByID(int id) &#123;</span><br><span class="line">        for (Employee employee : list) &#123;</span><br><span class="line">            if (employee.getId() == id) &#123;</span><br><span class="line">                return Mono.justOrEmpty(employee);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public Flux&lt;Employee&gt; getAllEmps() &#123;</span><br><span class="line">        return Flux.fromIterable(list);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Void&gt; addEmp(Mono&lt;Employee&gt; empMono) &#123;</span><br><span class="line">        return empMono.doOnNext(employee -&gt; list.add(employee)).thenEmpty(Mono.empty());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;IOC  控制反转  :创建对象的过程交给Spring&lt;/p&gt;
&lt;p&gt;AOP面向切面:不修改源代码进行内容增强 &lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://pavaneyu.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
